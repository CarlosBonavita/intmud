classe h_cmd_vestir
herda comando_comum
const classemenu = "m_cmd_vestir"
const posic = 5
txt12 lugar # Posições aonde quer vestir
txt12 vest # Posições aonde está vestindo alguma coisa
#
const m_ajuda = "-t\n\
-s <objeto> [posição]\n\
Seu personagem veste ou usa um objeto que está carregando.\n\
Para vestir tudo (até 10 objetos) tecle TUDO ao invés do objeto.\n\
Para saber em que posições pode vestir algo, tecle EQUIP TUDO"
const m_sem_args = "Vestir o quê?"
const m_naover = "Você não vê $m."
const m_longe_a = "$A está longe."
const m_nao_consegue_p = "Você não consegue vestir $o."
const m_nao_consegue_a = "$A não consegue vestir $o."
const m_nivel_p = "Você precisa chegar no nível $m para vestir $o."
const m_nivel_a = "$A precisa chegar no nível $m para vestir $o."
const m_renascer1 = "Você precisa renascer uma vez para vestir $o."
const m_renascer2 = "Você precisa renascer duas vezes para vestir $o."
const m_renascer3 = "Você precisa renascer $m vezes para vestir $o."
const m_posicao_p = "Você não sabe aonde fica $m."
const m_posicao_a = "$A não sabe aonde fica $m."
const m_em_uso_p = "Você já está usando $o nessa posição."
const m_em_uso_a = "$A já está usando $o nessa posição."
const m_em_cima_p = "Antes você precisa parar de usar $o."
const m_em_cima_a = "Antes $A precisa parar de usar $o."
const admordem = "m_ajuda m_sem_args m_naover m_longe_a m_nao_consegue_p\n\
m_nao_consegue_a m_nivel_p m_nivel_a m_renascer1 m_renascer2 m_renascer3\n\
m_posicao_p m_posicao_a m_em_uso_p m_em_uso_a m_em_cima_p m_em_cima_a"

func escr
  ret !arg1, $mensjog.msg(m_sem_args, arg0)
  refvar perm_msg = $perm_[arg0.jogperm].vestir
  ret perm_msg, $mensjog.msg(perm_msg, arg0)
  refvar alvo = ref(arg0.persoesc) # Quem vai vestir
  ret alvo.dono != arg0 && alvo.dono != arg0.dono, $mens.mp(m_longe_a, arg0, alvo)
  refvar tipomsg = arg0 == alvo ? "_p" : "_a"
  refvar tipo1 = txte(alvo.tipo1)
  refvar tipo2 = txte(alvo.tipo2)
  refvar tipo3 = txte(alvo.tipo3)
# Variáveis
  int8 achou # Se 0, não achou nenhum item para vestir
  nomeobj n # Para reconhecer os itens
  listaitem item
  vest = lugar = "0"
# Preenche a variável vest com o que está vestindo
  epara item = alvo.dentro2.ini, item, item.depois
    refvar pos = item.obj.vestpos
    pos > 0 && pos < 50 && (vest |= intbith(pos - 1))
  efim
# Descobre aonde quer vestir
  misc:separa(arg1) # Separa nome do objeto do nome da posição
  se !misc:sep2
    lugar = alvo.equippos # Todas as posições que possui
  senao
    n.ini(misc:sep2, 100)
    textotxt t
    textopos p
    t.addfim(config:equip_txt)
    refvar lug2 = ~txthex(alvo.equippos, 12)
    epara p = t.ini, p, p.depois
      lug2 & intbith(p.linha) == "0" && n.nome(p.texto) && (lugar |= intbith(p.linha))
    efim
    se lugar == "0"
      $mens.mens = misc:sep2
      $mens.mp(m_posicao[tipomsg], arg0, alvo)
      ret
    fimse
  fimse
# Vestir itens
  listaobj l
  n.ini(misc:sep1, misc:objmax, misc:tudo)
  epara l.addfim(alvo.dentro1), l, l.ini.remove
    ref r = l.objini
    continuar !r.visivel(arg0) || !n.nome(r.var.z_ident ?? r.ident, r.objtot)
    achou = 1
    txt100 erro # Se for um texto vazio, pode vestir
# Checa se o personagem pode vestir
    se r.vestirsim == (alvo == arg0 ? 2 : 1)
      erro = m_nao_consegue[tipomsg]
    senao r.vestirsexo == (alvo.psexo ? 1 : 2)
      erro = m_nao_consegue[tipomsg]
# Checa o nível
    senao int(r.pnivel) > alvo.pnivel
      $mens.mens = r.pnivel
      erro = m_nivel[tipomsg]
    senao int(r.renascer) > arg0.prenascer
      $mens.mens = r.renascer
      se r.renascer == 1
        erro = m_renascer1
      senao r.renascer == 2
        erro = m_renascer2
      senao
        erro = m_renascer3
      fimse
# Checa se a classe ou a raça tem permissão
    senao !r.vestirnao
    senao tipo1 && txtproclin(txte(r.vestirnao), tipo1) >= 0
      erro = m_nao_consegue[tipomsg]
    senao tipo2 && txtproclin(txte(r.vestirnao), tipo2) >= 0
      erro = m_nao_consegue[tipomsg]
    senao tipo3 && txtproclin(txte(r.vestirnao), tipo3) >= 0
      erro = m_nao_consegue[tipomsg]
    fimse
# Tenta vestir
    !erro && (erro = objvestir(alvo, r, int(n)))
    erro && $mens.mp(erro, arg0, alvo, r)
  efim
# Avisa se não encontrou nenhum item
  se !achou
    misc:separa(arg1)
    $mens.mens = misc:sep1
    $mens.mp(m_naover, arg0)
  fimse

func objvestir # Quer vestir um item
# arg0 = personagem, arg1 = objeto, arg2 = quantidade
  refvar tipomsg = arg0 == arg0.contr ? "_p" : "_a"
  uint8 total
  epara total = arg2, total, total--
# Checa se o item pode ser vestido
    refvar lugar1 = lugar & txt(arg1.vestir1) # Posições aonde pode vestir o item
    se lugar1 == "0"
      $mens.mp(m_nao_consegue[tipomsg], arg0.contr, arg0, arg1)
      ret
    fimse
# Exclui posições em que está vestindo algo
    refvar lugar2 = lugar1 & ~txthex(vest, 12)
    se lugar2 == "0"
      listaitem item
      epara item = arg0.dentro2.ini, item, item.depois
        sair item.obj.vestpos && intbith(item.obj.vestpos - 1) & (lugar1 & vest) != "0"
      efim
      $mens.mp(m_em_uso[tipomsg], arg0.contr, arg0, item.obj)
      ret
    fimse
# Checa os itens que estão em cima
    txt512 lin
    epara lin = txtbith(lugar2), lin, lin = txt2(lin)
      sair vest & txt(config:vestir[txt1(lin)]) == "0"
    efim
    se !lin
      lin = txtbith(lugar2)
      txt12 pos = vest & txt(config:vestir[txt1(lin)])
      listaitem item
      epara item = arg0.dentro2.ini, item, item.depois
        continuar !item.obj.vestpos
        sair txttroca(intbith(item.obj.vestpos - 1) & pos, "0", "")
      efim
      $mens.mp(m_em_cima[tipomsg], arg0.contr, arg0, item.obj)
      ret
    fimse
# Checa se o item deixa vestir
    txt100 txtvestir = arg1.cmd_podevestir(arg0)
    ret txtvestir, txtvestir
# Eventos
    refvar numpos = 1 + txt1(lin)
    listaobj l
    epara l.addfim(arg0.evento), l, l.ini.remove
      ret l.objini.cmd_vestir(arg0, arg1, numpos, arg0), nulo
    efim
    epara l.addfim(arg1.evento), l, l.ini.remove
      ret l.objini.cmd_vestir(arg0, arg1, numpos, arg1), nulo
    efim
# Veste o item
    arg1.vestir(numpos)
    vest |= intbith(numpos - 1)
    refvar mvestir_a = txtsublin(config:equip_vestir, numpos - 1, 1) ?? "$P veste $o."
    refvar mvestir_p = txtsublin(config:equip_perso, numpos - 1, 1) ?? mvestir_a
    $mens.p(arg0, nulo, arg1)
    $mens.msgsomvis(mvestir[tipomsg], arg1.i_som_vest1, arg0.contr)
    $mens.mvis2som(mvestir_a, arg1.i_som_vest1)
# Eventos
    epara l.addfim(arg0.evento), l, l.ini.remove
      l.objini.cmd_vestiu(arg0, arg1, numpos, arg0)
    efim
    epara l.addfim(arg1.evento), l, l.ini.remove
      l.objini.cmd_vestiu(arg0, arg1, numpos, arg1)
    efim
  efim


classe m_cmd_vestir
herda comando_menu_cmd
#
const nome1 = "Ajuda"
const tipo1 = "opc_texto"
const vari1 = "m_ajuda"
#
const nome2 = "Sem argumentos"
const tipo2 = "opc_linha"
const vari2 = "m_sem_args"
#
const nome3 = "Sem alvo"
const tipo3 = "opc_linha"
const vari3 = "m_naover"
#
const nome4 = "Renascer 1 vez"
const tipo4 = "opc_linha"
const vari4 = "m_renascer1"
#
const nome5 = "Renascer 2 vezes"
const tipo5 = "opc_linha"
const vari5 = "m_renascer2"
#
const nome6 = "Renascer mais vezes"
const tipo6 = "opc_linha"
const vari6 = "m_renascer3"
#
const titu7 = " * Personagem veste"
#
const nome7 = "Não consegue"
const tipo7 = "opc_linha"
const vari7 = "m_nao_consegue_p"
#
const nome8 = "Posição não existe"
const tipo8 = "opc_linha"
const vari8 = "m_posicao_p"
#
const nome9 = "Já tem outro item"
const tipo9 = "opc_linha"
const vari9 = "m_em_uso_p"
#
const nome10 = "Outro item em cima"
const tipo10 = "opc_linha"
const vari10 = "m_em_cima_p"
#
const titu11 = " * Animal veste"
#
const nome11 = "Animal longe"
const tipo11 = "opc_linha"
const vari11 = "m_longe_a"
#
const nome12 = "Não consegue"
const tipo12 = "opc_linha"
const vari12 = "m_nao_consegue_a"
#
const nome13 = "Posição não existe"
const tipo13 = "opc_linha"
const vari13 = "m_posicao_a"
#
const nome14 = "Já tem outro item"
const tipo14 = "opc_linha"
const vari14 = "m_em_uso_a"
#
const nome15 = "Outro item em cima"
const tipo15 = "opc_linha"
const vari15 = "m_em_cima_a"
