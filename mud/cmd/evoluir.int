classe h_cmd_evoluir
herda comando_comum
const objmenu = $m_cmd_evoluir
const objtipo = 2 # Pode renomear
const posic = 4
#
const m_ajuda = "-t\n\
-s\n\
-s <personagem>\n\
Faz $um-animal evoluir. Sem argumentos, mostra quais $animais\n\
podem eovluir."
const m_naover = "Você não vê $m."
const m_naopertence = "$A não pertence a você."
const m_naopode = "$A não pode evoluir no nomento."
const m_naoevolui = "Não foi possível evoluir $a."
const m_vazio = "$Nenhum-animal em condição de evoluir."
const m_lista = "Podem evoluir:"
const m_animal = "$Q para $m"
const m_podeevoluir = "$P já pode evoluir para $m."
const m_evoluir1 = "$P evolui para $c."
const admordem = "m_ajuda m_naover m_naopertence m_naopode m_naoevolui\n\
m_vazio m_lista m_animal m_podeevoluir m_evoluir1"

func escr
  se !arg1
    textotxt t
    listaobj l
    epara l.addfim(arg0.dentro2, arg0.lseguir), l, l.ini.remove
      continuar l.objini.tseguir != 3 && l.objini.dono != arg0
      continuar !evoluir(l.objini, arg0)
      refvar cl = "p_" + l.objini.p_evoluiperso
      $mens.mens = (!l.objini.psexo ? [cl]:descnomefem) ?? [cl]:descnome
      $mens.p(l.objini)
      t.addfim($mens.txt(m_animal, arg0))
    efim
    t.addini($mensjog.txt(t.linhas ? m_lista : m_vazio, arg0))
    ret arg0.msg(t.remove(1000))
  fimse
# Obtém o animal
  ref anim = misc:persodentro(arg0, arg1) ?? misc:persooutro(arg0, arg1)
  se !anim
    $mens.mens = arg1
    ret $mens.mp(m_naover, arg0)
  senao anim.dono != arg0 && (anim.tseguir != 3 || anim.iseguir.objlista != arg0)
    ret $mens.mp(m_naopertence, arg0, anim)
  senao !evoluir(anim, arg0)
    ret $mens.mp(m_naopode, arg0, anim)
  fimse
# Tenta evoluir
  ref anim2 = anim.mudaobjeto("p_" + anim.p_evoluiperso)
  ret !anim2, $mens.mp(m_naoevolui, arg0, anim)
  $mens.p(anim, anim2)
  listaobj l
  epara l.addfim(arg0.dono.dentro2), l, l.ini.remove
    $mens.msginv(anim2.p_evoluimsg1 ?? m_evoluir1, l.objini)
  efim

func evoluir # Verifica se um personagem pode evoluir
# arg0 = personagem, arg1 = dono atual
# Retorna: 0=não pode, 1=pode
  ret !arg0.perso || arg0.pnivel < arg0.p_evoluinivel, 0
  ret arg0.perso != p_[arg0.p_evoluiperso]:perso, 0
  ret arg0.p_evoluicom && arg0.z_dono == arg1.descnome2 ? 0 : 1

func infoevoluir # Informa o dono se o personagem já pode evoluir
# arg0 = personagem
# Nota: é chamado sempre que o personagem sobe um nível
  ref dono = arg0.dono.perso ? arg0.dono : arg0.tseguir == 3 ? arg0.iseguir.objlista
  se dono && evoluir(arg0, dono)
    refvar cl = "p_" + arg0.p_evoluiperso
    $mens.mens = (!arg0.psexo ? [cl]:descnomefem) ?? [cl]:descnome
    $mens.p(arg0, arg0.dono)
    $mens.msginv(m_podeevoluir, dono)
  fimse
    

classe m_cmd_evoluir
herda comando_menu_cmd
#
const nome1 = "Ajuda"
const tipo1 = "opc_texto"
const vari1 = "m_ajuda"
#
const nome2 = "Sem personagem"
const tipo2 = "opc_linha"
const vari2 = "m_naover"
#
const nome3 = "Não pertence"
const tipo3 = "opc_linha"
const vari3 = "m_naopertence"
#
const nome4 = "Não evolui"
const tipo4 = "opc_linha"
const vari4 = "m_naopode"
#
const nome5 = "Não foi possível"
const tipo5 = "opc_linha"
const vari5 = "m_naoevolui"
#
const nome6 = "Nenhum animal"
const tipo6 = "opc_linha"
const vari6 = "m_vazio"
#
const nome7 = "Lista de animais"
const tipo7 = "opc_linha"
const vari7 = "m_lista"
#
const nome8 = "Animal da lista"
const tipo8 = "opc_linha"
const vari8 = "m_animal"
#
const nome9 = "Já pode evoluir"
const info9 = "Ao subir de nível"
const tipo9 = "opc_linha"
const vari9 = "m_podeevoluir"
#
const nome10 = "Animal evolui"
const tipo10 = "opc_linha"
const vari10 = "m_evoluir1"
