classe h_comando_hab_cfg
herda comando_comum
const m_desmaiado0 = "Você está desmaiad$s."
const m_desmaiado1 = "$A está desmaiad$t."
const m_nao_obedece = "$A não quer obedecer você."
const m_sem_arma = "Não possui a arma necessária."
const m_com_arma = "Empunhando uma arma?"
const m_arma_errada = "Com essa arma?"
const m_sem_efeito = "A magia não teve efeito."
const m_vida = "Pontos de vida insuficientes."
const m_mana = "Mana insuficiente."
const m_move = "Vigor insuficiente."
const admordem = "m_desmaiado0 m_desmaiado1 m_nao_obedece m_sem_arma m_com_arma\n\
m_arma_errada m_sem_efeito m_vida m_mana m_move"


classe comando_hab
herda comando_comum
const objcmd = arg0.persobat.var.[nomevar] ? este
const objnivel = !tipoarma || tipoarma & intbit(int(arg0.iempu.obj.armatipo)) ? 0 : 2
const posic = 4
const falha1 = 0
const falha2 = 0
const tipoalvo = 6

func habajuda # Retorna um texto que contém informações
# arg0 = objeto do personagem
  textotxt t
  se depende
    t.addfim(depende)
    textopos pos
    epara pos = t.ini, pos, pos.depois
      pos.mudar(misc:nomevar(pos.texto))
    efim
    t.addfim("Requer conhecimentos de: " + txttroca(t.remove(1000), "\n", ", "))
    t.juntar, t.dividelin(40, 75)
  fimse
  txt512 lin
  refvar sintaxe = (txt(nomevar, 0, 1) == "m" ? "Lançar " : "") + txts(txt(nomevar, 2))
  lin = "\c3" + misc:nomevar(nomevar) + "\b\n"
  se tipoalvo >= 8
  senao tipoalvo == 7
    lin += "Sintaxe: " + sintaxe
  senao armamove
    lin += "Sintaxe: " + sintaxe + " [personagem]\n"
    lin += "         " + sintaxe + " <direção> [personagem]"
  senao
    lin += "Sintaxe: " + sintaxe + " [personagem]"
  fimse
  se tipoalvo < 6
    lin += "\nAtaque do tipo " + txtsublin(config:atknomes, tipoatk, 1)
    lin += ", Força " + ataquemin + (ataquemin != ataquemax ? " a " + ataquemax)
    lin += ", Velocidade " + vel
  fimse
  se int(aulaini) != int(aulafim)
    lin += "\nPrimeira aula a partir do nível "
    lin += intpos(int(aulaini) - config:nrenascer * txt2(arg0.var.[nomevar]))
    lin += ", perito nível "
    lin += intpos(int(aulafim) - config:nrenascer * txt2(arg0.var.[nomevar]))
  senao aulaini
    lin += "\nPode aprender a partir do nível "
    lin += intpos(int(aulaini) - config:nrenascer * txt2(arg0.var.[nomevar]))
  senao
    lin += "\nPode aprender em qualquer nível"
  fimse
  refvar f1 = falha1 < 0 ? 0 : falha1 > 100 ? 100 : falha1
  refvar f2 = falha2 < 0 ? 0 : falha2 > 100 ? 100 : falha2
  se f1 != f2
    lin += ", Falha " + f1 + "% iniciante a " + f2 + "% perito"
  senao f1 >= 100
    lin += ", Sempre falha"
  senao f1 > 0
    lin += ", Falha " + f1 + "%"
  fimse
  se !atkfalha
    lin += ", Não falha por embriaguez/precisão/evasão"
  fimse
  t.addini(lin)
  msgextra && t.addfim(msgextra)
  se c_vida1 || c_vida2
    refvar min = int(c_vida2)
    refvar max = int(c_vida1)
    se min != max
      t.addfim("Consome de " + min + " a " + max + " pontos de vida.")
    senao min == 1
      t.addfim("Consome 1 ponto de vida.")
    senao
      t.addfim("Consome " + min + " pontos de vida.")
    fimse
  fimse
  se c_mana1 || c_mana2
    refvar min = int(c_mana2)
    refvar max = int(c_mana1)
    se min != max
      t.addfim("Consome de " + min + " a " + max + " pontos de mana.")
    senao min == 1
      t.addfim("Consome 1 ponto de mana.")
    senao
      t.addfim("Consome " + min + " pontos de mana.")
    fimse
  fimse
  se c_move1 || c_move2
    refvar min = int(c_move2)
    refvar max = int(c_move1)
    se min != max
      t.addfim("Consome de " + min + " a " + max + " pontos de movimento.")
    senao min == 1
      t.addfim("Consome 1 ponto de movimento.")
    senao
      t.addfim("Consome " + min + " pontos de movimento.")
    fimse
  fimse
  se tipoperso
    t.addfim("Somente classes/raças: " + txttroca(tipoperso, "\n", ", "))
  fimse
  ret t.remove(1000)

func checahab1 # Checa se personagem pode usar habilidade/magia e avisa o personagem
# arg0 = personagem
# arg1 = item usado, ou nulo se não usou nenhum item
  ret checahab2(arg0, (arg0.var.[nomevar] - 1) / 7, arg1)

func checahab2 # Checa se personagem pode usar habilidade/magia e avisa o personagem
# arg0 = personagem
# arg1 = quanto sabe da habilidade ou magia (0=iniciante até 1=perito)
# arg2 = item usado, ou nulo se não usou nenhum item
# Retorna verdadeiro se pode usar
  refvar contr0 = arg0.contr
  int8 erro = 0
  se contr0.posicao <= 4 # Dormindo ou incapacitado
    contr0.msgposicao
    ret
  senao arg0.posicao <= 4 # Animal dormindo ou incapacitado
    se arg0.posicao < 4 || !a_dormindo
      arg0.msgposicao(contr0)
      ret
    fimse
  senao !contr0.poslugar # Desmontado
    casovar contr0.posicao
    casose "5"
      erro = !a_descansando
      sair
    casose "6"
      erro = !a_sentado
      sair
    casose "7"
      erro = !a_bat_em_pe
      sair
    casose
      erro = !a_em_pe
      sair
    casofim
  senao contr0.poslugar.objlista.perso # Montado
    erro = contr0.atkenv ? !a_bat_montado : !a_montado
  senao # Sentado
    erro = contr0.atkenv ? !a_bat_sentado : !a_sentado
  fimse
  se erro
    refvar bat = a_bat_sentado || a_bat_montado || a_bat_em_pe
    refvar nbat = a_descansando || a_sentado || a_montado || a_em_pe
    se a_dormindo && !bat && !nbat # Somente dormindo
      se contr0 != arg0
        contr0.msg($mensjog.txt(perso_cfg:acordado_b, arg0))
      senao
        $mensjog.msg(perso_cfg:posicao8a, contr0)
      fimse
    senao !contr0.atkenv && !nbat && bat # Somente na batalha
      $mensjog.msg(perso_cfg:semluta_a, contr0)
    senao
      contr0.msgposicao
    fimse
    ret
  senao !arg0.pvidaok
    $mens.mp(comando_hab_cfg:m_desmaiado[arg0 == contr0], contr0, arg0)
    ret
  senao arg2.item # Usou algum objeto: não checa a posição e a arma usada
  senao contr0 != arg0 && contr0.pnivel + config:animal_n < arg0.pnivel
    $mens.mp(comando_hab_cfg:m_nao_obedece, contr0, arg0)
    ret
  senao !tipoarma # Nenhum tipo de arma definido: aceita qualquer arma
  senao tipoarma & intbit(int(arg0.iempu.obj.armatipo)) # Usando a arma certa
  senao !arg0.iempu # Não está usando uma arma
    $mens.mp(comando_hab_cfg:m_sem_arma, contr0, arg0)
    ret
  senao tipoarma == 1
    $mens.mp(comando_hab_cfg:m_com_arma, contr0, arg0)
    ret
  senao
    $mens.mp(comando_hab_cfg:m_arma_errada, contr0, arg0)
    ret
  fimse
  se arg0.dono.s_semmagia && txt(nomevar, 0, 1) == "m"
    $mens.mp(comando_hab_cfg:m_sem_efeito, contr0, arg0)
    ret
  senao arg2.item # Usou algum objeto: não tem custo
  senao arg0.pvida <= arg1 * (c_vida2 - c_vida1) + c_vida1
    $mens.mp(comando_hab_cfg:m_vida, contr0, arg0)
    ret
  senao arg0.pmana < arg1 * (c_mana2 - c_mana1) + c_mana1
    $mens.mp(comando_hab_cfg:m_mana, contr0, arg0)
    ret
  senao arg0.pmove < arg1 * (c_move2 - c_move1) + c_move1
    $mens.mp(comando_hab_cfg:m_move, contr0, arg0)
    ret
  fimse
  ret 1

func autohab1 # Checa se personagem pode usar habilidade/magia em ataque automático
# arg0 = personagem
  ret autohab2(arg0, (arg0.var.[nomevar] - 1) / 7)

func autohab2 # Checa se personagem pode usar habilidade/magia em ataque automático
# arg0 = personagem
# arg1 = quanto sabe da habilidade ou magia (0=iniciante até 1=perito)
# Retorna verdadeiro se pode usar
  refvar contr0 = arg0.contr
  se contr0.posicao <= 4 # Dormindo ou incapacitado
    ret
  senao arg0.posicao <= 4 # Animal dormindo ou incapacitado
    ret arg0.posicao < 4 || !a_dormindo, nulo
  senao !contr0.poslugar # Desmontado
    casovar contr0.posicao
    casose "5"
      sair a_descansando
      ret
    casose "6"
      sair a_sentado
      ret
    casose "7"
      sair a_bat_em_pe
      ret
    casose
      sair a_em_pe
      ret
    casofim
  senao contr0.poslugar.objlista.perso # Montado
    ret contr0.atkenv ? !a_bat_montado : !a_montado, nulo
  senao # Sentado
    ret contr0.atkenv ? !a_bat_sentado : !a_sentado, nulo
  fimse
  ret !arg0.pvidaok || arg0.posicao < posic, nulo
  ret contr0 != arg0 && contr0.pnivel + config:animal_n < arg0.pnivel, nulo
  ret contr0.dono.s_semmagia && txt(nomevar, 0, 1) == "m", nulo
  ret arg0.pvida <= arg1 * (c_vida2 - c_vida1) + c_vida1, nulo
  ret arg0.pmana < arg1 * (c_mana2 - c_mana1) + c_mana1, nulo
  ret arg0.pmove < arg1 * (c_move2 - c_move1) + c_move1, nulo
  ret !contr0.dono.s_luta && tipoalvo != 6 && tipoalvo != 7, nulo
  ret 1

func custohab1 # Aplica os custos da habilidade/magia
# arg0 = personagem
  ret custohab2(arg0, (arg0.var.[nomevar] - 1) / 7)

func custohab2 # Aplica os custos da habilidade/magia
# arg0 = personagem
# arg1 = quanto sabe da habilidade ou magia (0=iniciante até 1=perito)
  arg0.pvida -= arg1 * (c_vida2 - c_vida1) + c_vida1
  arg0.pmana -= arg1 * (c_mana2 - c_mana1) + c_mana1
  arg0.pmove -= arg1 * (c_move2 - c_move1) + c_move1
  arg0.contr.p_espera < c_espera && (arg0.contr.p_espera = c_espera)


classe m_cmd_habcomum
herda comando_menu_cmd
const titulo = "Todas as habilidades e magias"
#
const nome1 = "Perso desmaiado"
const tipo1 = "opc_linha"
const clas1 = "comando_hab_cfg"
const vari1 = "m_desmaiado0"
#
const nome2 = "Animal desmaiado"
const tipo2 = "opc_linha"
const clas2 = "comando_hab_cfg"
const vari2 = "m_desmaiado1"
#
const nome3 = "Animal não obedece"
const tipo3 = "opc_linha"
const clas3 = "comando_hab_cfg"
const vari3 = "m_nao_obedece"
#
const nome4 = "Sem arma"
const tipo4 = "opc_linha"
const clas4 = "comando_hab_cfg"
const vari4 = "m_sem_arma"
#
const nome5 = "Com arma"
const tipo5 = "opc_linha"
const clas5 = "comando_hab_cfg"
const vari5 = "m_com_arma"
#
const nome6 = "Arma errada"
const tipo6 = "opc_linha"
const clas6 = "comando_hab_cfg"
const vari6 = "m_arma_errada"
#
const nome7 = "Não teve efeito"
const tipo7 = "opc_linha"
const clas7 = "comando_hab_cfg"
const vari7 = "m_sem_efeito"
#
const nome8 = "Vida insuficiente"
const tipo8 = "opc_linha"
const clas8 = "comando_hab_cfg"
const vari8 = "m_vida"
#
const nome9 = "Mana insuficiente"
const tipo9 = "opc_linha"
const clas9 = "comando_hab_cfg"
const vari9 = "m_mana"
#
const nome10 = "Vigor insuficiente"
const tipo10 = "opc_linha"
const clas10 = "comando_hab_cfg"
const vari10 = "m_move"
