classe adm_item
const iniclasse = !$[arg0] && criar(arg0)
const txtajuda = "\b\c3Comandos de itens\b\n\
  \c2LITEM\b     Lista itens existentes\n\
  \c2PITEM\b     Pesquisa itens com um determinado nome\n\
  \c2IITEM\b     Mostra aonde está um item\n\
  \c2CITEM\b     Cria um item\n\
  \c2EITEM\b     Edita um item\n\
  \c2AITEM\b     Apaga um ou mais itens"


classe adm_litem
herda comando_adm
const objcmd = arg1.c_litem ? este
const txtajuda = "\b\c3Litem\b\n\
Sintaxe: LITEM [nome]\n\
Lista os itens que começam com o nome especificado.\n\
Se o nome for omitido, lista todos os itens."

func escr
  listar(arg0, arg1, arg2, "")

func listar # Listar itens
# arg0 = para que jogador listar
# arg1 = nome da classe (para comando lperso) ou "" se todas
# arg2 = permissões do jogador
# arg3 = nome do personagem (para comando pperso), ou "" se todos
  refvar t = arg0.sock.txtmais
  debug d
  prog p
  int32 total
  txt100 lin
  t.limpar
  d.exec = 50000
  p.iniclasse("i_" + txtremove(arg1, "EMDCT7"))
  se int(arg2.c_litem) >= 2
    epara nulo, p.lin, p.depois
      continuar arg3 && txtproc([p.texto]:nome, arg3) < 0
      lin = txt(p.texto, 2) + " " + txt(" SGC", [p.texto]:item, 1)
      t.addfim(lin + " " + inttotal($[p.texto]) + "  " + [p.texto]:nome)
      total += inttotal($[p.texto])
    efim
  senao
    refvar prefixo = "i_" + arg0.jogarea
    arg1 == txt(arg0.jogarea, 0, inttotal(arg1)) && p.iniclasse(prefixo)
    epara nulo, p.lin, p.depois
      sair prefixo + txtfim(p.texto, 3) != p.texto
      continuar arg3 && txtproc([p.texto]:nome, arg3) < 0
      lin = txt(p.texto, 2) + " " + txt(" SGC", [p.texto]:item, 1)
      t.addfim(lin + " " + inttotal($[p.texto]) + "  " + [p.texto]:nome)
      total += inttotal($[p.texto])
    efim
  fimse
  se t.linhas
    t.addini("\b\c6Item(" + t.linhas + ") Tipo Quantidade(" + total + ") Nome\b")
  senao
    t.addini("\bNenhum item encontrado.")
  fimse
  arg0.sock.txtmostra


classe adm_pitem
herda adm_litem
const objcmd = arg1.c_litem ? este
const txtajuda = "\b\c3Pitem\b\n\
Sintaxe: PITEM [nome]\n\
Pesquisa os itens com o nome especificado ou parte dele.\n\
Se o nome for omitido, lista todos os itens."

func escr
  listar(arg0, "", arg2, arg1)


classe adm_iitem
herda comando_adm
const objcmd = arg1.c_iitem ? este
const txtajuda = "\b\c3Iitem\b\n\
Sintaxe: IITEM <nome>\n\
Mostra aonde está cada item do tipo especificado."

func escr # Listar personagens
  prog p
  se arg1 == ""
    arg0.msg("\bTecle o nome do item IITEM")
  senao !existe_i(arg0, arg1)
    arg0.msg("\bItem não existe: " + arg1)
  senao arg2.c_iperso <= 1 && arg0.jogarea + txtfim(arg1, 3) != arg1
    arg0.msg("\bItem não existe: " + arg1)
  senao !$i_[arg1]
    arg0.msg("\bItem não está no jogo: " + arg1)
  senao
    textotxt t
    t.addfim("\b\c6Itens " + arg1 + " em:\b")
    ref r
    ref s
    txt100 lin
    epara r = $i_[arg1], r && t.linhas < 500, r = objdepois(r)
      epara s = r.dono, s, s = s.dono
        se s.perso
          lin = (s.jog ? ", jogador" : ", " + txt(s, 2)) + " (" + s.nome + ")" + lin
        senao s.item
          lin = ", " + txt(s, 2) + " (" + s.nome + ")" + lin
        senao
          lin = ", " + txt(s, 2) + " (" + s.s_titulo + ")" + lin
        fimse
      efim
      t.addfim(txt(lin, 2)), lin = ""
    efim
    arg0.msg2(t.remove(500))
  fimse


classe adm_citem
herda comando_adm
const objcmd = arg1.c_eitem ? este
const txtajuda = "\b\c3Citem\b\n\
Sintaxe: CITEM <nome>\n\
Cria um item. Nome deve ser o nome de uma área ou do item.\n\
Nomes de itens são sempre nomes de área seguido de um número de 001 a 999."

func escr # Criar item
  prog p
  txt40 nome
  uint16 num
# Checa se digitou nome da sala
  se arg1 == ""
    ret arg0.msg("Tecle o nome do item ou da área após CITEM")
  fimse
# Checa nome completo
  nome = txtmin(txtremove(arg1, "EMDCT7"))
  num = int(txtfim(nome, 3)) + 1000
  se num > 1000 && txtfim(num, 3) == txtfim(arg1, 3)
    se !p.existe("a_" + txt(nome, 0, inttotal(nome) - 3))
      ret arg0.msg("Área não existe: " + txt(nome, 0, inttotal(nome) - 3))
    senao p.existe("i_" + nome)
      ret arg0.msg("Item já existe: " + nome)
    fimse
# Checa nome de área
  senao !p.existe("a_" + nome)
    ret arg0.msg("Área não existe: " + nome)
  senao
    epara num = 1001, p.existe("i_" + nome + txtfim(num, 3)), num++
      continuar num < 2000
      ret arg0.msg("Atingido limite de itens na área " + nome)
    efim
    nome += txtfim(num, 3)
  fimse
# Checa se pode criar sala
  se arg2.c_eitem >= 2
  senao nome != arg0.jogarea + txtfim(nome, 3)
    ret arg0.msg("Área não existe: " + txt(nome, 0, inttotal(nome) - 3))
  fimse
# Pergunta que tipo de item criar
  arg0.sock.var.opcclasse = nome
  passo(arg0.sock, "")

func passo # Escolher o tipo de item ao criar
  txt40 deriv
  casovar txtmin(arg1)
  casose
    arg0.msg("Opção inválida")
  casose "\b"
  casose ""
    arg0.passo = este
    arg0.msg("Entre com o tipo de item, O mostra as opções, Z cancela")
    ret 1
  casose "z"
    arg0.msg("Retornando ao jogo")
    arg0.passo = ""
    arg0.var.opcclasse = ""
    ret 1
  casose "o"
    arg0.txtmais.limpar
    arg0.txtmais.addfim("S Simples")
    arg0.txtmais.addfim("G Agrupa vários em um objeto para economizar memória")
    arg0.txtmais.addfim("C Completo (luz, mobília, container)")
    arg0.txtmostra
    ret 1
  casose "s"
    deriv = "comum_item"
    sair
  casose "g"
    deriv = "comum_itemgrupo"
    sair
  casose "c"
    deriv = "comum_itemperso"
    sair
  casofim
# Cria item
  prog p
  txt100 area
  area = txt(arg0.var.opcclasse, 0, inttotal(arg0.var.opcclasse) - 3)
  p.criar("i_" + arg0.var.opcclasse + "\nareas/" + area + "\nherda " + deriv)
  criar("admordena", "areas/" + area)
# config:salvar
  arg0.msg("\bItem criado: " + arg0.var.opcclasse)
  admlog(arg0, "criou item " + arg0.var.opcclasse)
  arg0.passo = ""
  arg0.var.opcclasse = ""
  ret 1


classe adm_aitem
herda comando_adm
const objcmd = arg1.c_eitem ? este
const txtajuda = "\b\c3Aitem\b\n\
Sintaxe: AITEM <nomes dos itens>\n\
Apaga uma ou mais itens, com os nomes especificados."

func escr # Apagar item
  prog p
  refvar nome = txtmin(txtremove(arg1, "EMDCT7"))
  se nome == ""
    ret arg0.msg("Tecle um ou mais nomes de itens após AITEM")
  fimse
  uint16 x
  enquanto txtsub(nome, x, 1)
    refvar nome = txtsub(nome, x, 1)
    se !p.existe("i_" + nome)
      ret arg0.msg("Item não existe: " + nome)
    senao arg2.c_eitem >= 2
    senao nome != arg0.jogarea + txtfim(nome, 3)
      ret arg0.msg("Item não existe: " + nome)
    fimse
    x++
  efim
  arg0.sock.tpasso = nome
  passo(arg0.sock, "")

func passo # Confirmar que quer apagar item
  arg0.passo = ""
  se arg1 == "n"
    arg0.msg("Cancelado")
  senao arg1 == "s"
    prog p
    uint16 x
    enquanto txtsub(arg0.tpasso, x, 1)
      p.apagar("i_" + txtsub(arg0.tpasso, x, 1))
      x++
    efim
    config:salvar
    se x < 2
      arg0.msg("Item apagado: " + arg0.tpasso)
      admlog(arg0, "apagou item " + arg0.tpasso)
    senao
      arg0.msg("Itens apagados: " + arg0.tpasso)
      admlog(arg0, "apagou itens " + arg0.tpasso)
    fimse
  senao
    txt20 m1
    arg0.passo = este
    m1 = txt2(arg0.tpasso) ? "itens" : "item"
    arg0.msg("Apagar " + m1 + infonome(arg0.tpasso) + "? Tecle S ou N")
  fimse
  ret 1

func infonome
  txt200 n1
  txt300 n2
  n1 = arg0
  enquanto n1
    refvar agora = txt1(n1)
    n1 = txt2(n1)
    n2 += " " + agora + "(" + i_[agora]:nome + ")"
  efim
  ret n2


classe adm_eitem
herda comando_adm
const objcmd = arg1.c_eitem ? este
const txtajuda = "\b\c3Eitem\b\n\
Sintaxe: EITEM <nome>\n\
Edita o item com o nome especificado."

func escr # Editar item
  prog p
  uint8 num
  refvar nome = txtmin(txtremove(arg1, "EMDCT7"))
  se nome == ""
    ret arg0.msg("Tecle o nome do item após EITEM")
  senao !p.existe("i_" + nome)
    ret arg0.msg("\bItem não existe: " + nome)
  senao !p.existe("menu_item" + (num = i_[nome]:item))
    ret arg0.msg("\bItem não pode ser editado: " + nome)
  senao arg2.c_eitem >= 2
  senao nome != arg0.jogarea + txtfim(nome, 3)
    ret arg0.msg("\bItem não existe: " + nome)
  fimse
  arg0.sock.var.classe1 = "i_" + txtmin(nome)
  arg0.sock.var.menufim = "menu_item" + num
  arg0.sock.m_menu("menu_item" + num)


classe menu_identro1
herda comando_menu
const titulo = "Dentro"
const menufim = var.menufim
const colunas = 25
#
const nome1 = "Volume"
const tipo1 = "opc_numero"
const clas1 = var.classe1
const vari1 = "volmax"
#
const nome2 = "Expande"
const info2 = "Volume aumenta se tiver itens dentro"
const tipo2 = "opc_simnao"
const clas2 = var.classe1
const vari2 = "volexp"
const exec2 = "ajustapeso"
#
const nome3 = "Objetos máximo"
const tipo3 = "opc_numero"
const clas3 = var.classe1
const vari3 = "objmax"
#
const nome4 = "Itens dentro"
const info4 = "Se vazio, pode-se colocar moedas e qualquer item dentro"
const tipo4 = "opc_listaitem"
const clas4 = var.classe1
const vari4 = "i_itens"

classe menu_identro3
herda menu_identro1
#
const nome5 = "Container"
const tipo5 = "opc_opcao"
const clas5 = var.classe1
const vari5 = "i_abertoini"
const exec5 = "recalc_exec"
const extr5 = "Não\n\
Sempre aberto\n\
Inicialmente aberto\n\
Inicialmente fechado\n\
Inicialmente trancado\n\
Indefinido; não checa se está aberto, fechado ou trancado"
#
const nome6 = "Trancar"
const tipo6 = "opc_opcao"
const clas6 = var.classe1
const vari6 = "i_tranc"
const extr6 = "Não pode ser trancado\nPode ser trancado\nTranca ao fechar"
#
const nome7 = "Fechadura"
const info7 = "Código da chave que tranca e destranca o container"
const tipo7 = "opc_linha"
const clas7 = var.classe1
const vari7 = "i_fechadura"
#
const nome8 = "Come chave"
const info8 = "Se o personagem perde a chave ao abrir o item"
const tipo8 = "opc_simnao"
const clas8 = var.classe1
const vari8 = "i_comechave"


classe menu_iarma
herda comando_menu
const titulo = "Arma"
const menufim = var.menufim
const colunas = 25
#
const nome1 = "Tipo de arma"
const tipo1 = "opc_opcao"
const clas1 = var.classe1
const vari1 = "armatipo"
const extr1 = "Não é arma\n" + txtsublin(config:arma_txt, 1)
#
const nome2 = "Ataque automático"
const info2 = "Habilidade usada como ataque automático dessa arma\n\
Se estiver vazio, o nome da habilidade é o tipo de arma"
const tipo2 = "opc_linha"
const clas2 = var.classe1
const vari2 = "armaatk"
#
const nome3 = "Precisão arma"
const info3 = "Para armas que por natureza são imprecisas\n\
De 0 a 100, 0=sempre erra e 100=mesma precisão que atacar sem arma"
const tipo3 = "opc_numero"
const clas3 = var.classe1
const vari3 = "armaprecisao"
const extr3 = "0 100"
const exec3 = "recalc_exec"
#
const nome4 = "Precisão perso"
const info4 = "Quanta precisão o personagem ganha durante um ataque com essa arma"
const tipo4 = "opc_numero"
const clas4 = var.classe1
const vari4 = "armaaddprecisao"
const exec4 = "recalc_exec"
#
const nome5 = "Alcance da arma"
const info5 = "Alcance em pontos de movimento, para percorrer salas em uma direção"
const tipo5 = "opc_numero"
const clas5 = var.classe1
const vari5 = "armamove"
#
const nome6 = "Ataque mín"
const tipo6 = "opc_numero"
const clas6 = var.classe1
const vari6 = "armamin"
const exec6 = "recalc_exec"
#
const nome7 = "Ataque máx"
const tipo7 = "opc_numero"
const clas7 = var.classe1
const vari7 = "armamax"
const exec7 = "recalc_exec"
#
const nome8 = "Só ataca manual"
const info8 = "Se o personagem não usa essa arma em ataques automáticos"
const tipo8 = "opc_simnao"
const clas8 = var.classe1
const vari8 = "armamanual"


classe menu_ifome
herda comando_menu
const titulo = "Fome e sede"
const menufim = var.menufim
const colunas = 25
#
const nome1 = "Tipo"
const tipo1 = "opc_opcao"
const clas1 = var.classe1
const vari1 = "f_tipo"
const extr1 = "Nenhum\n\
Fonte, não some após beber\n\
Poção, beber\n\
Comida, comer\n\
Pergaminho, recitar"
#
const nome2 = "Msg perso"
const info2 = "Quando alguém come/bebe/recita o item; se vazio usa mensagem padrão"
const tipo2 = "opc_linha"
const clas2 = var.classe1
const vari2 = "f_msgperso"
#
const nome3 = "Msg outros"
const info3 = "Quando alguém come/bebe/recita o item; se vazio usa Msg perso"
const tipo3 = "opc_linha"
const clas3 = var.classe1
const vari3 = "f_msgoutros"
#
const nome4 = "Sacia a sede"
const info4 = "Um minuto são de 3 a 4 unidades, exceto no deserto"
const tipo4 = "opc_numero"
const clas4 = var.classe1
const vari4 = "f_sede"
const extr4 = "-250 250"
#
const nome5 = "Sustenta"
const info5 = "Um minuto são de 3 a 4 unidades"
const tipo5 = "opc_numero"
const clas5 = var.classe1
const vari5 = "f_fome"
const extr5 = "-250 250"
#
const nome6 = "Embriaguês"
const info6 = "Um minuto são de 6 a 8 unidades"
const tipo6 = "opc_numero"
const clas6 = var.classe1
const vari6 = "f_bebida"
const extr6 = "-250 250"
#
const nome7 = "Digestão"
const info7 = "Quanto tempo leva para digerir o alimento\n\
Um minuto são de 3 a 12 unidades, dependendo da posição do personagem"
const tipo7 = "opc_numero"
const clas7 = var.classe1
const vari7 = "f_diges"
const extr7 = "-250 250"
#
const nome8 = "Magia 1"
const info8 = "Nome da magia"
const tipo8 = "opc_linha"
const clas8 = var.classe1
const vari8 = "f_magia1"
#
const nome9 = "Nível 1"
const tipo9 = "opc_numero"
const clas9 = var.classe1
const vari9 = "f_nivel1"
const extr9 = "0 65535"
#
const nome10 = "Magia 2"
const info10 = "Nome da magia"
const tipo10 = "opc_linha"
const clas10 = var.classe1
const vari10 = "f_magia2"
#
const nome11 = "Nível 2"
const tipo11 = "opc_numero"
const clas11 = var.classe1
const vari11 = "f_nivel2"
const extr11 = "0 65535"
#
const nome12 = "Magia 3"
const info12 = "Nome da magia"
const tipo12 = "opc_linha"
const clas12 = var.classe1
const vari12 = "f_magia3"
#
const nome13 = "Nível 3"
const tipo13 = "opc_numero"
const clas13 = var.classe1
const vari13 = "f_nivel3"
const extr13 = "0 65535"


classe menu_icomum
herda comando_menu
const nome1 = "Nome"
const tipo1 = "opc_linha"
const clas1 = var.classe1
const vari1 = "nome"
#
const nome2 = "Palavras chave"
const info2 = "Palavras que os jogadores digitam para se referir ao item"
const tipo2 = "opc_linha"
const clas2 = var.classe1
const vari2 = "ident"
#
const nome3 = "Descrição curta"
const info3 = "Descrição usada na maioria dos comandos"
const tipo3 = "opc_linha"
const clas3 = var.classe1
const vari3 = "descnome"
#
const nome4 = "Descrição sala"
const info4 = "Descrição quando está na sala"
const tipo4 = "opc_linha"
const clas4 = var.classe1
const vari4 = "descpos"
#
const nome5 = "Descrição ao olhar"
const tipo5 = "opc_texto"
const clas5 = var.classe1
const vari5 = "descver"
#
const nome6 = "Descrição ident"
const info6 = "Texto adicionado após identificar (com magia de identificação)"
const tipo6 = "opc_texto"
const clas6 = var.classe1
const vari6 = "descident"
#
const nome7 = "Sexo Msg"
const info7 = "Usado nas mensagens com o objeto"
const tipo7 = "opc_opcao"
const clas7 = var.classe1
const vari7 = "msexo"
const extr7 = "Feminino\nMasculino"
#
const nome8 = "Peso"
const info8 = "Em gramas"
const tipo8 = "opc_numero"
const clas8 = var.classe1
const vari8 = "pesoobj"
const extr8 = "1 1000000000"
const exec8 = "ajustapeso"
#
const nome9 = "Volume"
const tipo9 = "opc_numero"
const clas9 = var.classe1
const vari9 = "volobj"
const extr9 = "1 1000000000"
const exec9 = "ajustapeso"
#
const nome11 = "Nível"
const info11 = "Nível mínimo para vestir/empunhar o item"
const tipo11 = "opc_numero"
const clas11 = var.classe1
const vari11 = "nivel"
#
const nome12 = "Renascer"
const info12 = "Quantas vezes precisa renascer para vestir/empunhar o item"
const tipo12 = "opc_numero"
const clas12 = var.classe1
const vari12 = "renascer"
#
const nome13 = "Mantém na sala"
const info13 = "Como a opção \"Apagar itens\" da sala ou área afeta o item"
const tipo13 = "opc_simnao"
const clas13 = var.classe1
const vari13 = "mantersala"
#
const nome14 = "Mantém em jogador"
const info14 = "Se o jogador não perde o item ao entrar em uma sala que mata e perde itens"
const tipo14 = "opc_simnao"
const clas14 = var.classe1
const vari14 = "manterperso"
#
const nome15 = "Quanto vale"
const tipo15 = "opc_numero"
const clas15 = var.classe1
const vari15 = "valor"
#
const nome16 = "Tipo de produto"
const info16 = "Para saber se um vendedor pode comprar esse item"
const tipo16 = "opc_vetor"
const clas16 = var.classe1
const vari16 = "tipoitem"
const extr16 = config:produtos
#
const nome17 = "Aonde vestir"
const tipo17 = "opc_vetor"
const clas17 = var.classe1
const vari17 = "vestir1"
const extr17 = config:equip_txt
#
const nome18 = "Podem vestir"
const tipo18 = "opc_opcao"
const clas18 = var.classe1
const vari18 = "vestirsim"
const extr18 = "Todos\nJogadores e PNJs\nAnimais capturados"
#
const nome19 = "Não podem vestir"
const info19 = "Raças e classes que não podem usar esse item"
const tipo19 = "opc_tipos"
const clas19 = var.classe1
const vari19 = "vestirnao"
#
const nome20 = "Atributos"
const tipo20 = "menu_iatribs--"
#
const nome21 = "Fome e sede"
const tipo21 = "menu_ifome--"
#
const nome22 = "Arma"
const tipo22 = "menu_iarma--"
#
const nome23 = "Pega animal nível"
const info23 = "Nível médio dos animais que podem ser capturados com esse item,\n\
ou 0 se não puder capturar"
const tipo23 = "opc_numero"
const clas23 = var.classe1
const vari23 = "i_captura"
#
const nome24 = "Chave"
const info24 = "Código da chave; abre fechaduras com o mesmo código"
const tipo24 = "opc_linha"
const clas24 = var.classe1
const vari24 = "i_chave"
#
const nome25 = "Ao pegar"
const info25 = "Mensagem ao tentar pegar o item; se vazio, consegue pegar"
const tipo25 = "opc_linha"
const clas25 = var.classe1
const vari25 = "i_pegar"
#
const nome50 = "Variáveis"
const tipo50 = "opc_linha"
const clas50 = var.classe1
const vari50 = "inivar"
#
const nome51 = "Eventos hora"
const info51 = "Se a função cmd_hora é chamada quando a hora MUD mudar (5 minutos)"
const tipo51 = "opc_simnao"
const clas51 = var.classe1
const vari51 = "evhora"
const exec51 = "ajustaobj"
#
const nome52 = "Eventos item"
const info52 = "Receber eventos do próprio item"
const tipo52 = "opc_simnao"
const clas52 = var.classe1
const vari52 = "eveste"
const exec52 = "ajustaobj"
#
const nome53 = "Eventos dono perso"
const info53 = "Se recebe eventos do dono se for personagem"
const tipo53 = "opc_simnao"
const clas53 = var.classe1
const vari53 = "evperso"
const exec53 = "ajustaobj"
#
const nome54 = "Eventos dono item"
const info54 = "Se recebe eventos do dono se for item"
const tipo54 = "opc_simnao"
const clas54 = var.classe1
const vari54 = "evitem"
const exec54 = "ajustaobj"
#
const nome55 = "Eventos dono sala"
const info55 = "Se recebe eventos da sala se estiver em uma sala"
const tipo55 = "opc_simnao"
const clas55 = var.classe1
const vari55 = "evsala"
const exec55 = "ajustaobj"


classe menu_item1
herda menu_icomum
const titulo = "Item simples " + txt(var.classe1, 2)
const colunas = 25
#
const nome10 = "Dentro"
const tipo10 = "menu_identro1--"


classe menu_item2
herda menu_icomum
const titulo = "Item grupo " + txt(var.classe1, 2)
const colunas = 25


classe menu_item3
herda menu_icomum
const titulo = "Item " + txt(var.classe1, 2)
const colunas = 25
#
const nome10 = "Dentro"
const tipo10 = "menu_identro3--"
#
const nome26 = "Mobília"
const info26 = "Sentar/dormir confortavelmente se recupera mais rápido"
const tipo26 = "opc_opcao"
const clas26 = var.classe1
const vari26 = "i_movel"
const extr26 = "Não\n\
Sentar\n\
Sentar e dormir\n\
Sentar confortavelmente\n\
Sentar e dormir confortavelmente"
#
const nome27 = "Lugares"
const tipo27 = "opc_numero"
const clas27 = var.classe1
const vari27 = "i_lugar"
#
const nome28 = "Fonte de luz"
const tipo28 = "menu_iluz--"


classe menu_iatribs
herda comando_menu
const titulo = "Atributos"
const menufim = var.menufim
const colunas = 25
#
const nome1 = "Texto item"
const info1 = "Aparece na frente da descrição do item, entre parênteses\n\
Para aparecer em baixo, adicionar um * (asterisco) na frente\n\
Exemplo: *  ... e está emitindo uma luz"
const tipo1 = "opc_linha"
const clas1 = var.classe1
const vari1 = "m_atribs1"
const exec1 = "atribs_exec"
#
const nome3 = "Sim/não item"
const info3 = "Nota: Muitos desses atributos não têm significado em itens"
const tipo3 = "opc_atribbit"
const clas3 = var.classe1
const vari3 = "recalc1_auto"
const exec3 = "recalc_exec"
#
const nome6 = "Texto ao vestir"
const info6 = "Aparece na frente da descrição do personagem, entre parênteses\n\
Para aparecer em baixo, adicionar um * (asterisco) na frente\n\
Exemplo: *  ... e está protegid$s por uma luz"
const tipo6 = "opc_linha"
const clas6 = var.classe1
const vari6 = "m_atribs2"
const exec6 = "atribs_dono"
#
const nome7 = "Números ao vestir"
const tipo7 = "opc_atribnum"
const clas7 = var.classe1
const vari7 = "recalc2_auto"
const exec7 = "recalc_dono"
#
const nome8 = "Sim/não ao vestir"
const tipo8 = "opc_atribbit"
const clas8 = var.classe1
const vari8 = "recalc2_auto"
const exec8 = "recalc_dono"
#
const nome9 = "Ataque ao vestir"
const info9 = "Afetam os danos quando o personagem ataca alguém"
const tipo9 = "opc_atribatk"
const clas9 = var.classe1
const vari9 = "recalc2_auto"
const exec9 = "recalc_dono"
#
const nome10 = "Defesa ao vestir"
const info10 = "Afetam os danos quando alguém ataca o personagem"
const tipo10 = "opc_atribdef"
const clas10 = var.classe1
const vari10 = "recalc2_auto"
const exec10 = "recalc_dono"


classe menu_iluz
herda comando_menu
const titulo = "Fonte de luz"
const menufim = var.menufim
const colunas = 25
#
const nome1 = "Tipo de luz"
const tipo1 = "opc_opcao"
const clas1 = var.classe1
const vari1 = "luzitem"
const extr1 = "Não aceita acender/apagar, sem fogo\n\
Lanterna (acende/apaga, sem fogo)\n\
Lanterna 2 (acende/apaga, inclusive na água)\n\
Não aceita acender/apagar, produz fogo\n\
Lampião (acende/apaga, produz fogo)\n\
Fósforo (acende uma vez, produz fogo)\n\
Tocha (acende com fogo, produz fogo)\n\
Automático (acende ao vestir, sem fogo)"
#
const nome2 = "Duração da luz"
const info2 = "Em décimos de segundo, se menor que zero começa apagado"
const tipo2 = "opc_numero"
const clas2 = var.classe1
const vari2 = "luzini"
#
const nome3 = "Acendeu mensagem"
const tipo3 = "opc_linha"
const clas3 = var.classe1
const vari3 = "luzliga"
#
const nome4 = "Sem luz mensagem"
const info4 = "Mensagem quando a luz acaba, se estiver vazio não envia nenhuma mensagem"
const tipo4 = "opc_linha"
const clas4 = var.classe1
const vari4 = "luztxt"
#
const nome5 = "Sem luz item some"
const info5 = "Se o item some (é apagado) quando a luz acaba"
const tipo5 = "opc_simnao"
const clas5 = var.classe1
const vari5 = "luzfim"
