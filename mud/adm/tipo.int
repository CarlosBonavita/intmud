classe adm_tipo
const iniclasse = !$[arg0] && criar(arg0)
const txtajuda = "\b\c3Comandos para tipos de personagens (raças e classes)\b\n\
  \c2LTIPO\b     Lista tipos de personagens\n\
  \c2CTIPO\b     Cria um tipo de personagem\n\
  \c2ETIPO\b     Edita um tipo de personagem\n\
  \c2ATIPO\b     Apaga um tipo de personagem\n\
  \c2TRES\b      Edita comandos do reset de tipo"


classe adm_ltipo
herda comando_adm
const txtajuda = "\b\c3Ltipo\b\n\
Sintaxe: LTIPO [nome]\n\
Lista os tipos de personagens que começam com o nome especificado.\n\
Se o nome for omitido, lista todos os personagens.\n\
Nota: tipos de personagens são raça e classe."

func escr
  prog p
  txt100 lin
  se !p.iniclasse("t_" + arg1)
    ret arg0.msg("\bNenhum tipo encontrado.")
  fimse
  refvar txtmais = arg0.sock.txtmais
  txtmais.limpar
  lin = "\b\c6Menu raças:\b\n  "
  epara nulo, p.lin, p.depois
    continuar $[p.texto].menu != 1
    lin += txt(p.texto, 2) + ", " + $[p.texto].nome
    txtmais.addfim([p.texto]:t_reset ? lin + ", tres" : lin), lin = "  "
  efim
  lin = "\b\c6Menu classes:\b\n  "
  epara p.iniclasse("t_" + arg1), p.lin, p.depois
    continuar $[p.texto].menu != 2
    lin += txt(p.texto, 2) + ", " + $[p.texto].nome
    txtmais.addfim([p.texto]:t_reset ? lin + ", tres" : lin), lin = "  "
  efim
  lin = "\b\c6Menu subclasses:\b\n  "
  epara p.iniclasse("t_" + arg1), p.lin, p.depois
    continuar $[p.texto].menu != 3
    lin += txt(p.texto, 2) + ", " + $[p.texto].nome
    txtmais.addfim([p.texto]:t_reset ? lin + ", tres" : lin), lin = "  "
  efim
  lin = "\b\c6Em nenhum menu:\b\n  "
  epara p.iniclasse("t_" + arg1), p.lin, p.depois
    continuar $[p.texto].menu
    lin += txt(p.texto, 2) + ", " + $[p.texto].nome
    txtmais.addfim([p.texto]:t_reset ? lin + ", tres" : lin), lin = "  "
  efim
  arg0.sock.txtmostra


classe adm_ctipo
herda comando_adm
const txtajuda = "\b\c3Ctipo\b\n\
Sintaxe: CTIPO <nome>\n\
Cria um tipo de personagem com o nome especificado.\n\
O nome deve ser composto de letras, mas pode ter espaços no meio.\n\
Nota: tipos de personagens são raça e classe."

func escr
  prog p
# Checa se digitou nome do tipo
  se arg1 == ""
    ret arg0.msg("Tecle o nome do tipo após CTIPO")
  fimse
# Checa se nome válido
  txt80 nome = txte(txtremove(arg1, "EMDSA"))
  se txtproc(txtsepara(txttroca(nome, " ", ""), "O+DOL,DOL+O"), " ") >= 0
    ret arg0.msg("Nome inválido para tipo de personagem: " + nome)
  senao inttotal(nome) > 40
    ret arg0.msg("Nome deve ter até 40 caracteres: " + nome)
  senao p.existe("t_" + nome)
    ret arg0.msg("Já existe o tipo: " + nome)
  fimse
# Cria tipo
  txt200 lin = "t_" + txts(nome) + "\nconfig/tipo\nherda comum_tipo"
  lin += "\nconst nome = \"" + txtcopiamai(txte(nome), "A") + "\""
  p.criar(lin)
  criar("admordena", "config/tipo")
# config:salvar
  arg0.msg("\bTipo criado: " + nome)
  admlog(arg0, "criou tipo " + nome)


classe adm_atipo
herda comando_adm
const txtajuda = "\b\c3Atipo\b\n\
Sintaxe: ATIPO <nome>\n\
Apaga o tipo de personagem com o nome especificado.\n\
Nota: tipos de personagens são raça e classe."

func escr
  prog p
  se arg1 == ""
    arg0.msg("Tecle um nome após ATIPO")
  senao !p.existe("t_" + arg1)
    arg0.msg("Tipo não existe: " + arg1)
  senao
    arg0.sock.tpasso = arg1
    passo(arg0.sock, "")
  fimse

func passo # Confirmar que quer apagar tipo
  arg0.passo = ""
  se arg1 == "n"
    arg0.msg("Cancelado")
  senao arg1 == "s"
    prog p
    p.apagar("t_" + arg0.tpasso)
    config:salvar
    arg0.msg("Tipo apagado: " + arg0.tpasso)
    admlog(arg0, "apagou tipo " + arg0.tpasso)
  senao
    arg0.passo = este
    arg0.msg("Apagar tipo " + arg0.tpasso + "? Tecle S ou N")
  fimse
  ret 1


classe adm_etipo
herda comando_adm
const txtajuda = "\b\c3Etipo\b\n\
Sintaxe: ETIPO <nome>\n\
Edita o tipo de personagem com o nome especificado.\n\
Nota: tipos de personagens são raça e classe."

func escr
  prog p
  se arg1 == ""
    arg0.msg("Tecle o nome do tipo após ETIPO")
  senao !p.existe("t_" + txts(arg1))
    arg0.msg("Tipo não existe: " + arg1)
  senao
    arg0.sock.var.classe1 = "t_" + txts(txtmin(arg1))
    arg0.sock.m_menu("menu_tipo")
  fimse


classe menu_tipo
herda comando_menu
const titulo = "Tipo " + txt(var.classe1, 2)
const colunas = 28
const classe = var.classe1
#
const nome1 = "Texto do menu"
const tipo1 = "opc_linha"
const vari1 = "nome"
#
const nome2 = "Texto menu feminino"
const info2 = "Se ausente, assume Texto do menu"
const tipo2 = "opc_linha"
const vari2 = "nome2"
#
const nome3 = "Texto comando Quem"
const tipo3 = "opc_linha"
const vari3 = "nomequem"
#
const nome4 = "Texto Quem feminino"
const info4 = "Se ausente, assume Texto comando Quem"
const tipo4 = "opc_linha"
const vari4 = "nomequem2"
#
const nome5 = "Descrição"
const info5 = "Aparece quando o jogador escolhe raça ou classe"
const tipo5 = "opc_texto"
const vari5 = "desc"
#
const nome6 = "Descrição feminino"
const info6 = "Se ausente, assume Descrição"
const info6 = "Aparece quando o jogador escolhe raça ou classe"
const tipo6 = "opc_texto"
const vari6 = "desc2"
#
const nome7 = "Está no menu"
const tipo7 = "opc_opcao"
const vari7 = "menu"
const extr7 = "Nenhum menu\nRaças\nClasses\nSubclasses"
#
const nome8 = "Somente sexo"
const tipo8 = "opc_opcao"
const vari8 = "sexo"
const extr8 = "Todos\nFeminino\nMasculino"
#
const nome9 = "Somente raças"
const info9 = "Se esse tipo for uma classe ou subclasse que não existe em todas as raças,\n\
escreva aqui em quais raças existe"
const tipo9 = "opc_tipos"
const vari9 = "racas"
#
const nome10 = "Somente classes"
const info10 = "Se esse tipo for uma subclasse que não existe em todas as classes,\n\
escreva aqui em quais classes existe"
const tipo10 = "opc_tipos"
const vari10 = "classes"
#
const nome11 = "Atributos números"
const tipo11 = "opc_atribnum"
const vari11 = "recalc_auto"
const exec11 = "recalc_ajusta"
#
const nome12 = "Atributos sim/não"
const tipo12 = "opc_atribbit"
const vari12 = "recalc_auto"
const exec12 = "recalc_ajusta"
#
const nome13 = "Atributos ataque"
const info13 = "Afetam os danos quando o personagem ataca alguém"
const tipo13 = "opc_atribatk"
const vari13 = "recalc_auto"
const exec13 = "recalc_ajusta"
#
const nome14 = "Atributos defesa"
const info14 = "Afetam os danos quando alguém ataca o personagem"
const tipo14 = "opc_atribdef"
const vari14 = "recalc_auto"
const exec14 = "recalc_ajusta"
#
const nome15 = "Equip posições"
const info15 = "Se não for <nulo>, são as posições aonde pode usar equipamentos"
const tipo15 = "opc_vetorhex"
const vari15 = "equip1"
const extr15 = config:equip_txt
#
const nome16 = "Equip adicionar"
const info16 = "Adicionar essas posições no personagem"
const tipo16 = "opc_vetorhex"
const vari16 = "equip2"
const extr16 = config:equip_txt
#
const nome17 = "Equip remover"
const info17 = "Remover essas posições do personagem"
const tipo17 = "opc_vetorhex"
const vari17 = "equip3"
const extr17 = config:equip_txt
#
const nome18 = "Exp máx fator 0"
const info18 = "A experiência para subir um nível é o resultado de:\n\
fator0 + fator1 * nível + fator2 * nível ao quadrado"
const tipo18 = "opc_numreal--"
const vari18 = "expmax0"
#
const nome19 = "Exp máx fator 1"
const info19 = "A experiência para subir um nível é o resultado de:\n\
fator0 + fator1 * nível + fator2 * nível ao quadrado"
const tipo19 = "opc_numreal--"
const vari19 = "expmax1"
#
const nome20 = "Exp máx fator 2"
const info20 = "A experiência para subir um nível é o resultado de:\n\
fator0 + fator1 * nível + fator2 * nível ao quadrado"
const tipo20 = "opc_numreal--"
const vari20 = "expmax2"
#
const nome21 = "Exp máx cada nível"
const info21 = "Permite definir a experiência para subir um nível em níveis específicos"
const tipo21 = "opc_nivel--"
const vari21 = "expmax_"
#
const nome22 = "Condição personagem"
const tipo22 = "menu_tipo_desccond--"
#
const titu23 = "* Somente jogadores"
#
const nome23 = "Personagem luta"
const info23 = "Somente personagens que podem ter animais"
const tipo23 = "opc_opcao"
const vari23 = "animalatk"
const extr23 = "Não definido\nPersonagem e animais\nSomente personagem\nSomente animais"
#
const nome24 = "Morreu perso"
const info24 = "Mensagem para o próprio personagem"
const tipo24 = "opc_linha"
const vari24 = "morreu0"
#
const nome25 = "Morreu outros"
const info25 = "Mensagem para os outros"
const tipo25 = "opc_linha"
const vari25 = "morreu1"
#
const nome26 = "Nível mínimo"
const info26 = "Quando o personagem é criado ou renasce, ele vai para esse nível.\n\
Se houverem níveis diferentes na raça, classe e subclasse, é considerado\n\
somente o maior."
const tipo26 = "opc_numero"
const vari26 = "nmin"
const extr26 = "0 65535"
#
const nome27 = "Nível máximo"
const info27 = "Quando o personagem chega no nível máximo, não sobe mais de nível, mas pode\n\
renascer. Se houverem níveis diferentes na raça, classe e subclasse,\n\
é considerado somente o maior. Se os três forem 0, não renasce."
const tipo27 = "opc_numero"
const vari27 = "nmax"
const extr27 = "0 65535"
#
const nome28 = "Evolui para"
const tipo28 = "opc_tipos"
const info28 = "Os novos tipos que o personagem pode escolher no comando renascer"
const vari28 = "evoluir"
#
const nome29 = "Fome e sede"
const info29 = "Somente raças; se pode sentir fome e sede (se não for imortal)"
const tipo29 = "opc_simnao"
const vari29 = "fome"
#
const nome30 = "Ataque automático"
const info30 = "Habilidade usada em ataques automáticos sem arma"
const tipo30 = "opc_linha"
const vari30 = "atipo"
#
const nome31 = "Volume mínimo"
const info31 = "Somente raças; o volume é escolhido aleatoriamente"
const tipo31 = "opc_numero"
const vari31 = "volmin"
const exec31 = "jogador:ajustajog"
#
const nome32 = "Volume máximo"
const info32 = "Somente raças; o volume é escolhido aleatoriamente"
const tipo32 = "opc_numero"
const vari32 = "volmax"
const exec32 = "jogador:ajustajog"
#
const nome33 = "Peso mínimo"
const info33 = "Somente raças; o peso é escolhido aleatoriamente"
const tipo33 = "opc_numero"
const vari33 = "pesomin"
const exec33 = "jogador:ajustajog"
#
const nome34 = "Peso máximo"
const info34 = "Somente raças; o peso é escolhido aleatoriamente"
const tipo34 = "opc_numero"
const vari34 = "pesomax"
const exec34 = "jogador:ajustajog"
#
const nome50 = "Variáveis"
const tipo50 = "opc_linha"
const vari50 = "inivar"


classe menu_tipo_desccond
herda comum_desccond
const menufim = "menu_tipo"
const classe = var.classe1
#
const nulo1 = "\c3" + perso_cfg:desccond0
const nulo2 = "\c3" + perso_cfg:desccond1
const nulo3 = "\c3" + perso_cfg:desccond2
const nulo4 = "\c3" + perso_cfg:desccond3
const nulo5 = "\c3" + perso_cfg:desccond4
const nulo6 = "\c3" + perso_cfg:desccond5
const nulo7 = "\c3" + perso_cfg:desccond6
const nulo8 = "\c3" + perso_cfg:desccond7


classe comum_tipo
#
# Ordem que deve organizar as constantes:
const admordem = "nome nome2 nomequem nomequem2 menu desc desc2 sexo racas classes\n\
equip1 equip2 equip3 animalatk morreu0 morreu1 nmin nmax evoluir fome atipo\n\
volmin volmax pesomin pesomax\n\
desccond0 desccond1 desccond2 desccond3 desccond4 desccond5 desccond6 desccond7\n\
inivar"
const iniclasse = !$[arg0] && criar(arg0)
const fome = 1

func recalc_ajusta # Ajusta variáveis quando algum atributo foi mudado
  refvar nome = txt2(txte(este))
  prog p
  ref r
  epara r = $jogador, r, r = objdepois(r)
    (r.tipo1 == nome || r.tipo2 == nome || r.tipo3 == nome) && (r.recalc = 1)
  efim
  epara p.iniclasse("p_"), p.lin, p.depois
    epara r = $[p.texto], r, r = objdepois(r)
      (r.tipo1 == nome || r.tipo2 == nome || r.tipo3 == nome) && (r.recalc = 1)
    efim
  efim
