classe comando_adm_ajuda
# Comando de administração que contém somente páginas de ajuda
const iniclasse = !$[arg0] && criar(arg0)
const txtajuda = txtajuda1(m_ajuda)

func txtajuda1 # Prepara um texto de ajuda
# arg0 = texto original
  txt20 sintaxe = "Sintaxe: "
  prog pr
  textotxt t
  t.addfim(arg0)
  textopos p = t.ini
  enquanto p.lin
    casovar txt1(txte(p.texto(0, 4)))
    casose "-t"
      p.mudar("\b\c3" + (p.texto(3) ?? txtmaimin(txt2(txte(este)))) + "\b")
      p.depois
      continuar
    casose "-s"
      p.mudar(sintaxe + txtmai(txt2(txte(este))), 0, 2)
      p.depois
      sintaxe = "         "
      continuar
    casose "-ss"
      p.mudar(sintaxe, 0, 4)
      p.depois
      sintaxe = "         "
      continuar
    casose "-m" # Item do menu
      refvar n = txt1(p.texto(3))
      p.mudar("  \c2" + txtmai(n) + "\b" + txtesp(12 - inttotal(n)), 0, inttotal(n) + 3)
      p.depois
      continuar
    casose "+"
    casose "-"
      p.mudar("", 0, 2)
    casose
      p.depois
      continuar
    casofim
    p.remove
  efim
  ret t.remove(1000)


classe comando_adm
herda comando_adm_ajuda
# Funções necessárias para os comandos de administração
#
const posic = 8 # Posição mínima para usar o comando; não usado em classes adm_
const objcmd = arg1 == $perm_admin ? este # Objeto que processa o comando
#
const admcod_@a = "\\\""
const admcod_@0e = " "
const admcod_@0n = "\\n"
const admcod_@n = "\\n"
const admdec_@b = "\\b"
const admdec_@c = "\\c"
const admdec_@d = "\\d"
const admdec_@_@n@_ = "\\e\\n\\e"
const admdec_@_@n = "\\e\\n"
const admdec_@n@_ = "\\n\\e"
const admdec_@n = "\\n"
#
const admcod = vartrocacod(arg0, "", "admcod_")

func admdec
  refvar t1 = vartrocacod("\n" + arg0 + "\n", "", "admdec_")
  ret txt(t1, 2, inttotal(t1) - 4)

func passosair # Sai do passo atual, volta para o menu
  $[arg0.passo = arg0.var.opcpasso].passo(arg0, "\b")
  ret 1

func admlog # Mensagem para todos com a opção "config +admlog"
# arg0.nome = nome do personagem
# arg1 = mensagem
  $misclog.admlog(arg0.nome + ": " + arg1)
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    item.obj.jogconfig.21 && item.obj.msg("\b\d1(adm) " + arg0.nome + " " + arg1 + "\b")
  efim

func cmdlog # Mensagem para todos com a opção "config +cmdlog"
# arg0.nome = nome do personagem
# arg1 = nome do comando
# arg2 = comando
  $misclog.cmdlog(arg1 + " " + arg0.nome + ": " + arg2)
  refvar t = "\b(cmd) " + arg0.nome + " " + arg1 + ": " + arg2 + "\b"
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    item.obj.jogconfig.22 && item.obj.msg(t)
  efim

func existe_p # Checa se personagem existe no comando Lperso
# arg0 = personagem do jogador ou objeto jogsock
# arg1 = nome do personagem (nome da classe em o "p_" no começo)
# Retorna verdadeiro se existe
  prog p
  casovar $perm_[arg0.jogperm].c_lperso
  casose "1"
    ret p.existe("p_" + arg1) && arg0.jogarea + txtfim(arg1, 3) == arg1
  casose "2"
    ret p.existe("p_" + arg1)
  casofim
  ret 0

func existe_i # Checa se item existe no comando Litem
# arg0 = personagem do jogador ou objeto jogsock
# arg1 = nome do item (nome da classe em o "i_" no começo)
# Retorna verdadeiro se existe
  prog p
  casovar $perm_[arg0.jogperm].c_litem
  casose "1"
    ret p.existe("i_" + arg1) && arg0.jogarea + txtfim(arg1, 3) == arg1
  casose "2"
    ret p.existe("i_" + arg1)
  casofim
  ret 0

func existe_s # Checa se sala existe no comando Lsala
# arg0 = personagem do jogador ou objeto jogsock
# arg1 = nome da sala (nome da classe em o "s_" no começo)
# Retorna verdadeiro se existe
  prog p
  casovar $perm_[arg0.jogperm].c_lsala
  casose "1"
    ret p.existe("s_" + arg1) && arg0.jogarea + txtfim(arg1, 3) == arg1
  casose "2"
    ret p.existe("s_" + arg1)
  casofim
  ret 0

func p_vartexto # Mesmo prog.vartexto, porém checa redirecionamento como "const a = b:c"
  prog p
  ret p.vartexto(arg0, arg1), 1
  p.inilinha(arg0, arg1)
  ret txt1(p.texto) != "const", 0
  refvar lin = txtsub(p.texto, 3)
  refvar ind1 = txtproc(lin, ":") # Aonde termina o nome da classe
  refvar ind2 = txtproc(lin, "#") + 1 ?? 10000 # Aonde termina o nome da função
  refvar funcao = txtremove(txt(lin, ind1 + 1, ind2 - ind1 - 2), "d")
  ret p.vartexto(txt(lin, 0, ind1), funcao)

func p_varnum # Mesmo prog.varnum, porém checa redirecionamento como "const a = b:c"
  prog p
  ret p.varnum(arg0, arg1), 1
  p.inilinha(arg0, arg1)
  ret txt1(p.texto) != "const", 0
  refvar lin = txtsub(p.texto, 3)
  refvar ind1 = txtproc(lin, ":") # Aonde termina o nome da classe
  refvar ind2 = txtproc(lin, "#") + 1 ?? 10000 # Aonde termina o nome da função
  refvar funcao = txtremove(txt(lin, ind1 + 1, ind2 - ind1 - 2), "d")
  ret p.varnum(txt(lin, 0, ind1), funcao)


classe admordena
# Organiza as classes de um arquivo em ordem alfabética
# Modo de usar:
# criar("admordena", <nome do arquivo sem o .int no final>)
intexec repete
txt100 nomeclasse

func ini
  nomeclasse = arg0, repete = 1

func repete_exec
  apagar(este)
  prog p
  textotxt t
  epara p.iniarq(nomeclasse), p.lin, p.depois
    t.addfim(p.texto)
  efim
  t.ordena
  p.clini(nomeclasse, t.ini.texto)
  enquanto t.linhas > 1
    p.cldepois(t.remove, t.ini.texto)
  efim
  config:salvar


classe admmudou
herda comando_adm
# Organiza constantes da classe na ordem definida pela constante admordem
# da classe. Depois, se o nome da função especificada não for nulo,
# chama essa função de todos os objetos da classe.
# Modo de usar:
# criar("admmudou", <nome da classe>, [nome da função])
#
txt100 nomeclasse
txt100 nomefunc
intexec ordem
intexec repete
listaobj l # Objetos cuja função ainda não foi chamada
textotxt t # Usado para organizar as constantes no início da classe
prog p # Usado para organizar as constantes no início da classe
txt100 tantes # Nome da constante anterior em textotxt t
int1 mudou # Se ocorreu alguma mudança no programa
uint8 cont # Contador, como medida de segurança

func ini
  nomeclasse = arg0, nomefunc = arg1, ordem = 1

func ordem_exec
  tantes = ""
  t.limpar
  ++cont < 50 && t.addfim(txttroca([nomeclasse]:admordem, " ", "\n"))
  p.inifunccl(nomeclasse)
  enquanto t.linhas
    se p.existe(nomeclasse, t.ini.texto) != 1 || p.vartipo(nomeclasse, t.ini.texto) != "const"
      t.remove
    senao p.texto == t.ini.texto
      p.depois, tantes = t.remove
    senao tantes
      p.fdepois(nomeclasse, t.remove, tantes)
      ordem = 1, mudou = 1
      ret
    senao
      p.fantes(nomeclasse, t.remove)
      ordem = 1, mudou = 1
      ret
    fimse
  efim
  mudou && config:salvar
# Aqui obtém os objetos para chamar uma função de cada objeto
  ret !nomefunc, apagar(este)
  se txtproc(nomefunc, ":") > 0
    refvar ind = txtproc(nomefunc, ":")
    nomeclasse = txt(nomefunc, 0, ind)
    nomefunc = txt(nomefunc, ind + 1)
  fimse
  repete = 1
  ref r
  epara r = $[nomeclasse], r, r = objdepois(r)
    l.addfim(r)
  efim

func repete_exec
  ret !l, apagar(este)
  refvar r = ref(l.objini)
  repete = 1, l.ini.remove, r.[nomefunc]
