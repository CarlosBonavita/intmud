classe adm_lsai
herda comando_adm
const objcmd = arg1.c_lsai ? este
const m_ajuda = "-t\n-s\nMostra as saídas da sala aonde você está."

func escr # Listar saídas
  se !arg0.dono
    ret arg0.msg("\bVocê não está em uma sala")
  senao arg2.c_lsai >= 2
  senao arg0.jogarea + txtfim(arg0.dono, 3) != txt(arg0.dono, 2)
    ret arg0.msg("Não pode ver as saídas dessa sala")
  fimse
  prog p
  txt80 dir
  txt80 lin
  arg0.msg("\b\c6Saídas de " + txt(arg0.dono, 2) + ":\b")
  epara dir = misc:listadir, dir, dir = txt2(dir)
    continuar !p.existe(arg0.dono, "dir_" + txt1(dir))
    lin = txtmai(txt1(dir)) + "  "
    lin += $opc_salaitem.menu(arg0.dono, "dir_" + txt1(dir))
    arg0.msg(lin)
  efim
  ret arg0.dono.s_entrada, arg0.msg("SAIR  (saída do item)")
  !lin && arg0.msg("Nenhuma")


classe adm_asai
herda comando_adm
const objcmd = arg1.c_esala ? este
const m_ajuda = "-t\n-s <direção>\nApaga a saída na direção especificada."

func escr # Apagar saída
  prog p
  txt10 dir
  dir = misc:d1[txt1(arg1)]
  se !arg0.dono
    arg0.msg("\bVocê não está em uma sala")
  senao arg2.c_esala <= 1 && arg0.jogarea + txtfim(arg0.dono, 3) != txt(arg0.dono, 2)
    arg0.msg("\bNão pode editar essa sala")
  senao !arg1
    arg0.msg("\bDigite a direção após ASAI")
  senao !dir
    arg0.msg("\bSaída não existe: " + arg1)
  senao
    int8 x
    x = p.apagar(arg0.dono, "dir_" + dir)
    x += p.apagar(arg0.dono, "portaini_" + dir)
    x += p.apagar(arg0.dono, "portanome_" + dir)
    x += p.apagar(arg0.dono, "portaartigo_" + dir)
    x += p.apagar(arg0.dono, "voar_" + dir)
    x += p.apagar(arg0.dono, "fugir_" + dir)
    x += p.apagar(arg0.dono, "inv_" + dir)
    x += p.apagar(arg0.dono, "fecha_" + dir)
    x += p.apagar(arg0.dono, "tranc_" + dir)
    x += p.apagar(arg0.dono, "fechadura_" + dir)
    x += p.apagar(arg0.dono, "comechave_" + dir)
    x += p.apagar(arg0.dono, "som_abrir_" + dir)
    x += p.apagar(arg0.dono, "som_fechar_" + dir)
    x += p.apagar(arg0.dono, "som_tranc_" + dir)
    x += p.apagar(arg0.dono, "som_destr_" + dir)
    x += p.apagar(arg0.dono, "msg_abrir1_" + dir)
    x += p.apagar(arg0.dono, "msg_abrir2_" + dir)
    x += p.apagar(arg0.dono, "msg_abrir3_" + dir)
    x += p.apagar(arg0.dono, "msg_fechar1_" + dir)
    x += p.apagar(arg0.dono, "msg_fechar2_" + dir)
    x += p.apagar(arg0.dono, "msg_fechar3_" + dir)
    x += p.apagar(arg0.dono, "msg_tranc1_" + dir)
    x += p.apagar(arg0.dono, "msg_tranc2_" + dir)
    x += p.apagar(arg0.dono, "msg_tranc3_" + dir)
    x += p.apagar(arg0.dono, "msg_destr1_" + dir)
    x += p.apagar(arg0.dono, "msg_destr2_" + dir)
    x += p.apagar(arg0.dono, "msg_destr3_" + dir)
    ret !x, arg0.msg("\bSaída não existe: " + arg1)
    config:salvar, arg0.msg("\bSaída apagada: " + dir)
    admlog(arg0, "apagou saída " + dir + " de " + txt(arg0.dono, 2))
  fimse


classe adm_csai
herda comando_adm
const objcmd = arg1.c_esala ? este
const m_ajuda = "-t\n\
-s <direção> <sala>\n\
-s <direção> item <item>\n\
Cria uma saída na sala aonde você está, na direção especificada.\n\
Saída para um item vai sempre para a sala aonde o item está.\n\
Exemplo, se quiser que a saída para o norte vá para a sala teste001, tecle:\n\
csai n teste001"
const completo = 0
const escr = escr1(arg0, arg1, arg2) # Criar saída

func escr1
  prog p
  txt10 dir = misc:d1[txt1(arg1)]
  refvar sala = txtmin(txt2(arg1))
  refvar item = txtmin(txtsub(arg1, 1, 1) == "item" ? txtsub(arg1, 2))
  se !arg0.dono
    arg0.msg("\bVocê não está em uma sala")
  senao arg2.c_esala <= 1 && arg0.jogarea + txtfim(arg0.dono, 3) != txt(arg0.dono, 2)
    arg0.msg("\bNão pode editar essa sala")
  senao !arg1
    arg0.msg("\bDigite a direção após CSAI " + arg1)
  senao !dir
    arg0.msg("\bSaída não existe: " + txt1(arg1))
  senao !sala
    arg0.msg("\bDigite a sala após CSAI " + arg1)
  senao item && completo
    arg0.msg("\bUse Csai para criar saída para um item")
  senao item && c_sala <= 1
    arg0.msg("\bNão pode criar saída para item")
  senao item && !existe_i(arg0, item)
    arg0.msg("\bItem não existe: " + item)
  senao !item && !existe_s(arg0, sala)
    arg0.msg("\bSala não existe: " + sala)
  senao !item && arg2.c_esala <= 1 && arg0.jogarea + txtfim(sala, 3) != sala
    arg0.msg("\bNão pode criar saída para essa sala")
  senao
    se completo
      p.criar(arg0.dono, "const dir_" + dir + "=$s_" + sala)
      p.criar("s_" + sala, "const dir_" + misc:d2[dir] + "=$" + arg0.dono)
      arg0.msg("\bSaída completa criada: " + dir + " para " + sala)
    senao item
      p.criar(arg0.dono, "const dir_" + dir + "=$i_" + item)
      arg0.msg("\bSaída criada: " + dir + " para item " + item)
    senao
      p.criar(arg0.dono, "const dir_" + dir + "=$s_" + sala)
      arg0.msg("\bSaída criada: " + dir + " para " + sala)
    fimse
    config:salvar
    criar("admmudou", arg0.dono)
    admlog(arg0, "criou saída " + dir + " de " + txt(arg0.dono, 2))
  fimse


classe adm_csai2
herda adm_csai
const objcmd = arg1.c_esala ? este
const m_ajuda = "-t\n\
-s <direção> <sala>\n\
Cria uma saída na sala aonde você está, na direção especificada, e cria\n\
também uma saída no sentido contrário, da outra sala para essa."
const completo = 1 # Criar saída nos dois sentidos


classe adm_esai
herda comando_adm
const objcmd = arg1.c_esala ? este
const m_ajuda = "-t\n\
-s <direção>\n\
Edita a saída na direção especificada."

func escr # Editar saída
  prog p
  txt10 dir
  dir = misc:d1[txt1(arg1)]
  se !arg0.dono
    arg0.msg("\bVocê não está em uma sala")
  senao arg2.c_esala <= 1 && arg0.jogarea + txtfim(arg0.dono, 3) != txt(arg0.dono, 2)
    arg0.msg("\bNão pode editar essa sala")
  senao !arg1
    arg0.msg("\bDigite a direção após ESAI")
  senao !dir
    arg0.msg("\bSaída não existe: " + arg1)
  senao !p.existe(arg0.dono, "dir_" + dir) && !(dir == "sair" && arg0.dono.s_entrada)
    arg0.msg("Não existe saída na direção " + txtmai(dir))
  senao arg2.c_esala <= 1 && arg0.jogarea + txtfim(txt2(arg1), 3) != txt2(arg1)
    arg0.msg("\bNão pode criar saída para essa sala")
  senao
    arg0.sock.var.classe1 = arg0.dono
    arg0.sock.var.saida1 = txtmin(dir)
    arg0.sock.m_menu("menu_saida")
  fimse


classe opc_saiinicio
herda opc_opcao

func passo
  opc_opcao:passo(arg0, arg1)
  casovar arg1
  casose "0"
  casose "1"
  casose "2"
  casose "3"
    $[arg0.var.classe1].mudaporta(arg0.var.saida1, arg1)
  casofim
  ret 1


classe opc_saiagora
herda opc_opcao
const menu = menu2($[arg0].[arg1], adm_sala:txt_porta)

func passo # Mudar o estado atual
  casovar arg1
  casose "z"
    sair
  casose "0"
  casose "1"
  casose "2"
  casose "3"
    se $[arg0.var.classe1].mudaporta(arg0.var.saida1, arg1)
      textotxt t
      t.addfim(adm_sala:txt_porta), t.remove(arg1)
      arg0.msg("Saída mudou para: " + arg1 + " " + t.remove)
    senao
      arg0.msg("Não foi possível mudar a saída")
    fimse
    sair
  casose
    arg0.passo = este
    arg0.msg("Escolha: 0 Sem porta, 1 Aberto, 2 Fechado, 3 Trancado, Z Cancela")
    ret 1
  casofim
  ret passosair(arg0)


classe menu_saida
herda comando_menu
const titulo = "Saída " + txtmai(var.saida1) + " de " + txt(var.classe1, 2)
const colunas = 25
const classe = var.classe1
#
const nome1 = "Estado inicial"
const tipo1 = "opc_saiinicio"
const vari1 = "portaini_" + var.saida1
const extr1 = adm_sala:txt_porta
#
const nome2 = "Estado atual"
const tipo2 = "opc_saiagora--"
const vari2 = "porta_" + var.saida1
#
const nome3 = "Invisível"
const tipo3 = "opc_simnao"
const vari3 = "inv_" + var.saida1
#
const nome4 = "Fecha ao passar"
const tipo4 = "opc_simnao"
const vari4 = "fecha_" + var.saida1
#
const nome5 = "Trancar"
const tipo5 = "opc_opcao"
const vari5 = "tranc_" + var.saida1
const extr5 = "Não pode ser trancado\nPode ser trancado\nTranca ao fechar"
#
const nome6 = "Fechadura"
const info6 = "Código da chave que tranca e destranca a porta\n\
Se for o nome de uma casa (vide comando lcasa), é necessário a chave da casa"
const tipo6 = "opc_linha"
const vari6 = "fechadura_" + var.saida1
#
const nome7 = "Come chave"
const info7 = "Se o personagem perde a chave ao abrir a porta"
const tipo7 = "opc_simnao"
const vari7 = "comechave_" + var.saida1
#
const nome8 = "Voar"
const info8 = "Se é preciso estar voando ou flutuando"
const tipo8 = "opc_simnao"
const vari8 = "voar_" + var.saida1
#
const nome9 = "Sem fuga"
const info9 = "Se não existe a possibilidade de fugir de uma luta nessa direção"
const tipo9 = "opc_simnao"
const vari9 = "fugir_" + var.saida1
#
const nome10 = "Nome da porta"
const tipo10 = "opc_linha"
const vari10 = "portanome_" + var.saida1
const nulo10 = "\c3" + txtnulo("h_cmd_" + var.saida1, "m_porta")
#
const nome11 = "Artigo porta"
const tipo11 = "opc_opcao"
const vari11 = "portaartigo_" + var.saida1
const extr11 = "a (porta)\nas (portas)\no (portão)\nos (portões)"
#
const nome12 = "Som abriu"
const info12 = "Para quem recebe a mensagem do personagem entrando na sala"
const tipo12 = "opc_linha"
const vari12 = "som_abrir_" + var.saida1
#
const nome13 = "Som fechou"
const info13 = "Para quem recebe a mensagem do personagem entrando na sala"
const tipo13 = "opc_linha"
const vari13 = "som_fechar_" + var.saida1
#
const nome14 = "Som trancou"
const info14 = "Para quem recebe a mensagem do personagem entrando na sala"
const tipo14 = "opc_linha"
const vari14 = "som_tranc_" + var.saida1
#
const nome15 = "Som destrancou"
const info15 = "Para quem recebe a mensagem do personagem entrando na sala"
const tipo15 = "opc_linha"
const vari15 = "som_destr_" + var.saida1
#
const nome16 = "Msg andar"
const tipo16 = "menu_saida_andar--"
#
const nome17 = "Msg abrir fechar"
const tipo17 = "menu_saida_abrir--"


classe menu_saida_andar
herda comando_menu
const titulo = "Mensagens andar " + txtmai(var.saida1) + " de " + txt(var.classe1, 2)
const colunas = 25
const classe = var.classe1
const menufim = "menu_saida"
#
const nome1 = "Perso"
const info1 = "Mensagem para o personagem que entrou"
const tipo1 = "opc_linha"
const vari1 = "msg_sai0_" + var.saida1
const nulo1 = "\c3" + txtnulo("h_cmd_" + var.saida1, "m_entra0")
#
const titu2 = " * Na sala origem"
#
const nome2 = "Saiu andando"
const tipo2 = "opc_linha"
const vari2 = "msg_sai1_" + var.saida1
const nulo2 = "\c3" + txtnulo("h_cmd_" + var.saida1, "m_sai1")
#
const nome3 = "Saiu flutuando"
const tipo3 = "opc_linha"
const vari3 = "msg_sai2_" + var.saida1
const nulo3 = "\c3" + txtnulo("h_cmd_" + var.saida1, "m_sai2")
#
const nome4 = "Saiu voando"
const tipo4 = "opc_linha"
const vari4 = "msg_sai3_" + var.saida1
const nulo4 = "\c3" + txtnulo("h_cmd_" + var.saida1, "m_sai3")
#
const nome5 = "Saiu cambaleando"
const tipo5 = "opc_linha"
const vari5 = "msg_sai4_" + var.saida1
const nulo5 = "\c3" + txtnulo("h_cmd_" + var.saida1, "m_sai4")
#
const titu6 = " * Na sala destino"
#
const nome6 = "Entrou cambaleando"
const tipo6 = "opc_linha"
const vari6 = "msg_entra4_" + var.saida1
const nulo6 = "\c3" + txtnulo("h_cmd_" + var.saida1, "m_entra4")
#
const nome7 = "Entrou andando"
const tipo7 = "opc_linha"
const vari7 = "msg_entra1_" + var.saida1
const nulo7 = "\c3" + txtnulo("h_cmd_" + var.saida1, "m_entra1")
#
const nome8 = "Entrou flutuando"
const tipo8 = "opc_linha"
const vari8 = "msg_entra2_" + var.saida1
const nulo8 = "\c3" + txtnulo("h_cmd_" + var.saida1, "m_entra2")
#
const nome9 = "Entrou voando"
const tipo9 = "opc_linha"
const vari9 = "msg_entra3_" + var.saida1
const nulo9 = "\c3" + txtnulo("h_cmd_" + var.saida1, "m_entra3")


classe menu_saida_abrir
herda comando_menu
const titulo = "Mensagens abrir " + txtmai(var.saida1) + " de " + txt(var.classe1, 2)
const colunas = 25
const classe = var.classe1
const menufim = "menu_saida"
#
const nome1 = "Abriu perso"
const tipo1 = "opc_linha"
const vari1 = "msg_abrir1_" + var.saida1
const nulo1 = "\c3" + txtnulo("h_cmd_abrir", "m_porta_abriu1")
#
const nome2 = "Abriu outros"
const tipo2 = "opc_linha"
const vari2 = "msg_abrir2_" + var.saida1
const nulo2 = "\c3" + txtnulo("h_cmd_abrir", "m_porta_abriu2")
#
const nome3 = "Abriu"
const tipo3 = "opc_linha"
const vari3 = "msg_abrir3_" + var.saida1
const nulo3 = "\c3" + txtnulo2("h_cmd_abrir", "m_porta_abriu")
#
const nome4 = "Fechou perso"
const tipo4 = "opc_linha"
const vari4 = "msg_fechar1_" + var.saida1
const nulo4 = "\c3" + txtnulo("h_cmd_fechar", "m_porta_fechou1")
#
const nome5 = "Fechou outros"
const tipo5 = "opc_linha"
const vari5 = "msg_fechar2_" + var.saida1
const nulo5 = "\c3" + txtnulo("h_cmd_fechar", "m_porta_fechou2")
#
const nome6 = "Fechou"
const tipo6 = "opc_linha"
const vari6 = "msg_fechar3_" + var.saida1
const nulo6 = "\c3" + txtnulo2("h_cmd_fechar", "m_porta_fechou")
#
const nome7 = "Trancou perso"
const tipo7 = "opc_linha"
const vari7 = "msg_tranc1_" + var.saida1
const nulo7 = "\c3" + txtnulo("h_cmd_trancar", "m_porta_trancou1")
#
const nome8 = "Trancou outros"
const tipo8 = "opc_linha"
const vari8 = "msg_tranc2_" + var.saida1
const nulo8 = "\c3" + txtnulo("h_cmd_trancar", "m_porta_trancou2")
#
const nome9 = "Trancou"
const tipo9 = "opc_linha"
const vari9 = "msg_tranc3_" + var.saida1
#
const nome10 = "Destrancou perso"
const tipo10 = "opc_linha"
const vari10 = "msg_destr1_" + var.saida1
const nulo10 = "\c3" + txtnulo("h_cmd_destrancar", "m_porta_destrancou1")
#
const nome11 = "Destrancou outros"
const tipo11 = "opc_linha"
const vari11 = "msg_destr2_" + var.saida1
const nulo11 = "\c3" + txtnulo("h_cmd_destrancar", "m_porta_destrancou2")
#
const nome12 = "Destrancou"
const tipo12 = "opc_linha"
const vari12 = "msg_destr3_" + var.saida1

func txtnulo2
  refvar tipo = [var.classe1]:portaartigo_[var.saida1] & 1
  ret txtnulo(arg0, arg1 + (tipo ? 4 : 3))
