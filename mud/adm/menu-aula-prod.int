classe opc_menuaula
herda opc_menuprod
const tipoprod = 0 # Indica que é aula

func menu # Retorna quantidade de aulas
# arg0=nome da classe, arg1=nome da variável
  prog p
  casovar p.existe(arg0, arg1)
  casose "1" # Na própria classe
    ret p_vartexto(arg0, arg1), menu2([arg0]:[arg1])
    p.inilinha(arg0, arg1)
    ret "<" + txt1(p.texto) + ">"
  casose "2" # Em uma classe herdada
    ret p_vartexto(arg0, arg1), "<herda> " + menu2([arg0]:[arg1])
    p.inilinha(arg0, arg1)
    ret "<herda " + txt1(p.texto) + ">"
  casose # Não foi definido
    ret "<nulo> " + menu2
  casofim

func menu2 # Usado por menu
  txt10 x
  x = intsublin(arg0)
  ret x == "0" ? "\c6Nenhuma aula\b" : x == "1" ? "\c6Uma aula\b" : "\c6" + x + " aulas\b"


classe opc_menuprod
herda comando_adm
const tipoprod = 1 # Indica que é produto

func menu # Retorna quantidade de produtos
# arg0=nome da classe, arg1=nome da variável
  prog p
  casovar p.existe(arg0, arg1)
  casose "1" # Na própria classe
    ret p_vartexto(arg0, arg1), menu2([arg0]:[arg1])
    p.inilinha(arg0, arg1)
    ret "<" + txt1(p.texto) + ">"
  casose "2" # Em uma classe herdada
    ret p_vartexto(arg0, arg1), "<herda> " + menu2([arg0]:[arg1])
    p.inilinha(arg0, arg1)
    ret "<herda " + txt1(p.texto) + ">"
  casose # Não foi definido
    ret "<nulo> " + menu2
  casofim

func menu2 # Usado por menu
  txt10 x
  x = intsublin(arg0)
  ret x == "0" ? "\c6Nenhum produto\b" : x == "1" ? "\c6Um produto\b" : "\c6" + x + " produtos\b"

func passo # Menu de aulas e de produtos
# arg0.msg(!tipoprod ? ">aula" : ">produto")
  arg0.var.opcinserir = ""
  casovar txtmin(txt(arg1, 0, 1))
  casose "\b"
  casose ""
    arg0.passo = este
    refvar lin = ", tecle O para saber as opções"
    arg0.msg(arg0.var.opcnome + " " + txt(arg0.var.opcclasse, 2) + lin)
    ret 1
  casose "o"
    textopos pos
    arg0.txtmais.limpar
    arg0.txtmais.addfim(arg0.var.opcnome + " " + txt(arg0.var.opcclasse, 2))
    arg0.txtmais.addfim([arg0.var.opcclasse]:[arg0.var.opcvar])
    pos = arg0.txtmais.ini, pos.depois
    !pos.texto && pos.remove
    se !pos.texto
      pos.apagar
    senao tipoprod # Produtos
      txt100 lin
      prog p
      enquanto pos
        lin = "\c2" + pos.linha + (pos.linha < 10 ? "\b. " : "\b.") + txt1(pos.texto)
        p.existe("i_" + txt1(pos.texto)) && (lin += "(" + i_[txt1(pos.texto)]:nome + ")")
        se txt2(pos.texto) != "0"
          lin += txtesp(20 - inttotal(pos.texto)) + " Nível: " + txt2(pos.texto)
        fimse
        pos.mudar(lin, 0, 1000), pos.depois
      efim
    senao # Habilidades
      txt100 lin
      enquanto pos
        lin = "\c2" + pos.linha + (pos.linha < 10 ? "\b. " : "\b.")
        casovar pos.texto(0, 2)
        casose "h_"
          lin += "H " + txte(txt1(pos.texto(2)))
          sair
        casose "i_"
          lin += "I " + txte(txt1(pos.texto(2)))
          sair
        casose "m_"
          lin += "M " + txte(txt1(pos.texto(2)))
          sair
        casose "o_"
          lin += "E " + txte(txt1(pos.texto(2)))
          sair
        casose
          lin += txt1(pos.texto)
          sair
        casofim
        lin += txtesp(20 - inttotal(pos.texto)) + " Aulas: " + txt2(pos.texto)
        lin += " " + txtsublin(misc:aulas, txt2(pos.texto), 1)
        pos.mudar(lin, 0, 1000), pos.depois
      efim
    fimse
    arg0.txtmais.addfim("\c2" + pos.linha + (pos.linha < 10 ? ".\b Linha vazia" : ".\bLinha \
vazia"))
    arg0.txtmais.addfim("Tecle E editar, I inserir ou A apagar, seguido do número da linha")
    arg0.txtmais.addfim("Z Sair, M seguido de um texto executa comando do MUD")
    arg0.txtmostra
    ret 1
  casose "m"
    arg0.perso.teclou(txtremove(txt(arg1, 1), "E"))
    ret 1
  casose "z"
    ret passosair(arg0)
  casose "a"
    uint16 lin
    uint16 total
    lin = txt(arg1, 1), total = intsublin([arg0.var.opcclasse]:[arg0.var.opcvar])
    se lin > 0 && lin <= total
      arg0.var.opclin = lin
      tipoprod ? $opc_menuprod_a.passo(arg0, "\b") : $opc_menuaula_a.passo(arg0, "\b")
    senao total == 0
      arg0.msg("Não há nenhuma linha")
    senao total == 1
      arg0.msg("Só existe a linha 1")
    senao
      arg0.msg("A linha deve ser um número de 1 a " + total)
    fimse
    ret 1
  casose "e"
  casose "i"
    uint16 lin
    uint16 total
    lin = txt(arg1, 1), total = intsublin([arg0.var.opcclasse]:[arg0.var.opcvar])
    se lin > 0 && lin <= total + 1
      arg0.var.opclin = lin
      arg0.var.opcinserir_ = txt(arg1, 0, 1) == "i"
      tipoprod ? $opc_menuprod1.passo(arg0, "\b") : $opc_menuaula1.passo(arg0, "\b")
    senao total == 0
      arg0.msg("Só existe a linha 1")
    senao
      arg0.msg("A linha deve ser um número de 1 a " + (total + 1))
    fimse
    ret 1
  casofim
  arg0.msg("Opção inválida: " + arg1)
  ret 1


classe opc_menuaula_a
herda comando_adm

func passo # Apagar uma aula
  casovar txtmin(arg1)
  casose
    arg0.msg("Apagar linha " + arg0.var.opclin + "? N não, S sim")
    arg0.passo = este
    ret 1
  casose "s"
    arg0.msg("Linha " + arg0.var.opclin + " apagada")
    textotxt t
    textopos pos
    t.addfim([arg0.var.opcclasse]:[arg0.var.opcvar])
    pos = t.ini, pos.linha = arg0.var.opclin - 1, pos.remove
    prog p
    se t.bytes <= 1
      p.apagar(arg0.var.opcclasse, arg0.var.opcvar)
    senao
      refvar lin = "=\"" + txttroca(t.remove(1000), "\n", "\\n") + "\""
      p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + lin)
    fimse
    config:salvar
    admlog(arg0, "alterou aulas: " + arg0.var.opcclasse + ":" + arg0.var.opcvar)
  casose "n"
    ret $opc_menuaula.passo(arg0, "")
  casofim


classe opc_menuprod_a
herda comando_adm

func passo # Apagar um produto
  casovar txtmin(arg1)
  casose
    arg0.msg("Apagar linha " + arg0.var.opclin + "? N não, S sim")
    arg0.passo = este
    ret 1
  casose "s"
    arg0.msg("Linha " + arg0.var.opclin + " apagada")
    textotxt t
    textopos pos
    t.addfim([arg0.var.opcclasse]:[arg0.var.opcvar])
    pos = t.ini, pos.linha = arg0.var.opclin - 1, pos.remove
    prog p
    se t.bytes <= 1
      p.apagar(arg0.var.opcclasse, arg0.var.opcvar)
    senao
      refvar lin = "=\"" + txttroca(t.remove(1000), "\n", "\\n") + "\""
      p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + lin)
    fimse
    config:salvar
    admlog(arg0, "alterou produtos: " + arg0.var.opcclasse + ":" + arg0.var.opcvar)
  casose "n"
    ret $opc_menuprod.passo(arg0, "")
  casofim


classe opc_menuaula1
herda comando_adm

func passo # Inserir ou editar aula
  uint16 x
  ret arg1 == "z", $opc_menuaula.passo(arg0, "")
  x = arg1, arg0.passo = este
  casovar intsub(arg0.var.opclin)
  casose "1" # Escolher o tipo de aula
    se arg1 == "h" || arg1 == "i" || arg1 == "m"
      arg0.var.opclin += " " + txtmin(arg1)
      $opc_menuaula1.passo(arg0, "")
    senao arg1 == "e"
      arg0.var.opclin += " o"
      $opc_menuaula1.passo(arg0, "")
    senao arg1 == "o"
      arg0.txtmais.limpar
      arg0.txtmais.addfim("Opções:")
      arg0.txtmais.addfim("H Habilidade, comando Hab")
      arg0.txtmais.addfim("M Magia, comando Magia")
      arg0.txtmais.addfim("I Idioma, comando Idioma")
      arg0.txtmais.addfim("E Extra, algo que aparece no comando Outros")
      arg0.txtmostra
    senao
      arg0.msg("Entre com o tipo, O mostra as opções, Z cancela")
    fimse
    ret 1
  casose "2" # Escolher o que aprender
    se arg1 == ""
      arg0.msg("Entre com o nome da prática, Z cancela")
    senao txtproc(txtsepara(arg1, "DO+DOLE,DOLE+DO", "\b"), "\b") >= 0
      arg0.msg("Digite apenas letras e espaço")
    senao
      arg0.var.opclin += " " + txts(txtremove(arg1, "EMD"))
      $opc_menuaula1.passo(arg0, "")
    fimse
    ret 1
  casose "3" # Escolher a quantidade de aulas
    se arg1 == "o"
      arg0.txtmais.limpar
      arg0.txtmais.addfim("Opções:")
      uint8 n
      epara n = 1, n < intsublin(misc:aulas), n++
        arg0.txtmais.addfim(txt(n) + " " + txtsublin(misc:aulas, n, 1))
      efim
      arg0.txtmostra
    senao x < 1 || x >= intsublin(misc:aulas)
      arg0.msg("Entre com a quantidade de aulas, O mostra as opções, Z cancela")
    senao
      arg0.var.opclin += " " + x
      textotxt t
      textopos pos
      t.addfim([arg0.var.opcclasse]:[arg0.var.opcvar])
      t.bytes == 1 && t.limpar
      pos = t.ini, pos.linha = int(txt1(arg0.var.opclin)) - 1
      !arg0.var.opcinserir && pos.remove
      pos.add(txtsub(arg0.var.opclin, 1, 1) + "_" + txtsub(arg0.var.opclin, 2))
      prog p
      refvar lin = "=\"" + txttroca(t.remove(1000), "\n", "\\n") + "\""
      p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + lin)
      config:salvar
      admlog(arg0, "alterou aulas: " + arg0.var.opcclasse + ":" + arg0.var.opcvar)
      sair
    fimse
    ret 1
  casofim
  ret $opc_menuaula.passo(arg0, "")


classe opc_menuprod1
herda comando_adm

func passo # Inserir ou editar produto
  uint16 x
  ret arg1 == "z", $opc_menuprod.passo(arg0, "")
  x = arg1, arg0.passo = este
  casovar intsub(arg0.var.opclin)
  casose "1" # Escolher o item
    prog p
    se arg1 == "" || arg1 == "\b"
      arg0.msg("Entre com o item, Z cancela")
    senao !p.existe("i_" + txts(arg1))
      arg0.msg("Item não existe: " + txts(arg1) + "; entre com outro")
    senao
      arg0.var.opclin += " " + txts(arg1)
      $opc_menuprod1.passo(arg0, "")
    fimse
    ret 1
  casose "2" # Escolher o nível
    se txt(x) != arg1
      arg0.msg("Entre com o nível, 0=manter, Z cancela")
    senao
      refvar opclin = arg0.var.opclin
      opclin += " " + x
      textotxt t
      textopos pos
      t.addfim([arg0.var.opcclasse]:[arg0.var.opcvar])
      t.bytes == 1 && t.limpar
      pos = t.ini, pos.linha = int(txt1(opclin)) - 1
      !arg0.var.opcinserir && pos.remove
      pos.add(txt2(opclin))
      prog p
      refvar lin = "=\"" + txttroca(t.remove(1000), "\n", "\\n") + "\""
      p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + lin)
      config:salvar
      opclin = txtsub(opclin, 1, 1)
      arg0.msg("Produto adicionado: " + opclin + "(" + i_[opclin]:nome + ")")
      admlog(arg0, "alterou produtos: " + arg0.var.opcclasse + ":" + arg0.var.opcvar)
      sair
    fimse
    ret 1
  casofim
  ret $opc_menuprod.passo(arg0, "")
